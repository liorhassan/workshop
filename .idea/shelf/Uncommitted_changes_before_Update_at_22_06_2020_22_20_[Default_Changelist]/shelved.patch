Index: workshopCode/tests/UnitTests/SystemHandler_UT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package UnitTests;\r\n\r\nimport DomainLayer.TradingSystem.Models.Basket;\r\nimport DomainLayer.TradingSystem.Models.Store;\r\nimport DomainLayer.TradingSystem.Models.User;\r\nimport DomainLayer.TradingSystem.*;\r\nimport org.junit.*;\r\nimport org.junit.rules.ExpectedException;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class SystemHandler_UT {\r\n\r\n    private SystemFacade sys;\r\n\r\n    @Before\r\n    public void setUp(){\r\n        sys = SystemFacade.getInstance();\r\n    }\r\n\r\n    @BeforeClass\r\n    public static void init(){\r\n        SystemFacade.getInstance().register(\"prince\");\r\n        SystemFacade.getInstance().addAdmin(\"prince\");\r\n        SystemFacade.getInstance().register(\"loco\");\r\n        SystemFacade.getInstance().getUsers().put(\"KING\", new User());\r\n        SystemFacade.getInstance().getUsers().get(\"KING\").setUsername(\"KING\");\r\n        SystemFacade.getInstance().getUsers().put(\"noy\", new User());\r\n        SystemFacade.getInstance().getUsers().get(\"noy\").setUsername(\"noy\");\r\n        SystemFacade.getInstance().getUsers().put(\"zuzu\", new User());\r\n        SystemFacade.getInstance().getUsers().get(\"zuzu\").setUsername(\"zuzu\");\r\n        Store s = new Store(\"Pull&Bear\", \"clothing\", SystemFacade.getInstance().getUsers().get(\"noy\"),new StoreOwning(\"noy\", \"Pull&Bear\"));\r\n        SystemFacade.getInstance().getStores().put(\"Pull&Bear\", s);\r\n        s.addManager(SystemFacade.getInstance().getUsers().get(\"zuzu\"), new StoreManaging(SystemFacade.getInstance().getUsers().get(\"noy\"), \"Pull&Bear\",\"zuzu\"), false);\r\n        s.addManager(SystemFacade.getInstance().getUsers().get(\"loco\"), new StoreManaging(SystemFacade.getInstance().getUsers().get(\"noy\"), \"Pull&Bear\", \"loco\"), false);\r\n        s.addToInventory(\"skinny jeans\", 120, Category.Clothing, \"The most comfortable skiny jeans\", 3);\r\n        s.addToInventory(\"blue top\", 120, Category.Clothing, \"pretty blue crop top\", 4);\r\n        Store s2 = new Store(\"Bershka\", \"clothing\", SystemFacade.getInstance().getUsers().get(\"noy\"),new StoreOwning(\"Bershka\", \"loco\"));\r\n        SystemFacade.getInstance().getStores().put(\"Bershka\", s2);\r\n        s2.addToInventory(\"skinny jeans\", 100, Category.Clothing, \"skinny jeans\", 3);\r\n\r\n    }\r\n\r\n    @AfterClass\r\n    public static void clean(){\r\n        SystemFacade.getInstance().resetAdmins();\r\n        SystemFacade.getInstance().resetStores();\r\n        SystemFacade.getInstance().resetUsers();\r\n    }\r\n\r\n    @Test\r\n    public void register_Test() {\r\n        sys.register(\"lior\");\r\n        assertTrue(sys.getUsers().containsKey(\"lior\"));\r\n    }\r\n\r\n    @Test\r\n    public void login_Test1() {\r\n        sys.logout();\r\n        assertEquals(null, sys.getActiveUser().getUsername());\r\n        sys.login(\"prince\", true);\r\n        assertEquals(sys.getUsers().get(\"prince\"), sys.getActiveUser());\r\n        assertTrue(sys.getActiveUser().getUsername().equals(\"prince\"));\r\n        assertTrue(sys.isAdminMode());\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void login_Test2() {\r\n        sys.login(\"loco\", false);\r\n        assertEquals(sys.getUsers().get(\"loco\"), sys.getActiveUser());\r\n        assertTrue(sys.getActiveUser().getUsername().equals(\"loco\"));\r\n        assertFalse(sys.isAdminMode());\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void openNewStore_Test() {\r\n        sys.login(\"loco\", false);\r\n        sys.openNewStore(\"ZARA\", \"clothing\");\r\n        assertTrue(sys.getStores().containsKey(\"ZARA\"));\r\n        assertTrue(sys.getActiveUser().getStoreOwnings().containsKey(sys.getStores().get(\"ZARA\")));\r\n        assertEquals(sys.getStores().get(\"ZARA\").getStoreFirstOwner(),sys.getActiveUser());\r\n        sys.logout();\r\n    }\r\n\r\n\r\n    @Test\r\n    public void addToShoppingBasket_Test() {\r\n        sys.addToShoppingBasket(\"Pull&Bear\", \"skinny jeans\", 1);\r\n        assertTrue(sys.checkIfBasketExists(\"Pull&Bear\"));\r\n        //String output =  sys.getActiveUser().getShoppingCart().getStoreBasket(sys.getStoreByName(\"Pull&Bear\")).viewBasket();\r\n        //assertEquals(\"Store name: Pull&Bear\\nProduct name: skinny jeans price: 120.0 amount: 1\\n\",output);\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void isProductAvailable_Test() {\r\n        assertTrue(sys.isProductAvailable(\"Pull&Bear\", \"skinny jeans\", 1));\r\n        assertTrue(sys.isProductAvailable(\"Pull&Bear\", \"skinny jeans\", 3));\r\n        assertTrue(sys.isProductAvailable(\"Pull&Bear\", \"blue top\", 4));\r\n        assertFalse(sys.isProductAvailable(\"Pull&Bear\", \"blue top\", 7));\r\n        assertFalse(sys.isProductAvailable(\"Pull&Bear\", \"skinny jeans\", 4));\r\n    }\r\n\r\n    @Test\r\n    public void viewShoppingCart_Test() {\r\n        sys.login(\"KING\", false);\r\n        String output = sys.viewSoppingCart();\r\n        assertEquals(\"Your ShoppingCart details: \\nempty!\", output);\r\n        sys.addToShoppingBasket(\"Pull&Bear\", \"skinny jeans\", 1);\r\n        String output1 = sys.viewSoppingCart();\r\n        assertTrue(sys.checkIfBasketExists(\"Pull&Bear\"));\r\n        assertEquals(\"Your ShoppingCart details: \\nStore name: Pull&Bear\\nProduct name: skinny jeans price: 120.0 amount: 1\\n\", output1);\r\n        sys.editShoppingCart(\"Pull&Bear\", \"skinny jeans\", 0);\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void editShoppingCart_Test() {\r\n        sys.login(\"loco\", false);\r\n        sys.addToShoppingBasket(\"Pull&Bear\", \"skinny jeans\", 1);\r\n        String output = sys.viewSoppingCart();\r\n        assertTrue(sys.checkIfBasketExists(\"Pull&Bear\"));\r\n        assertEquals(\"Your ShoppingCart details: \\nStore name: Pull&Bear\\nProduct name: skinny jeans price: 120.0 amount: 1\\n\", output);\r\n        sys.editShoppingCart(\"Pull&Bear\", \"skinny jeans\", 3);\r\n        String output1 = sys.viewSoppingCart();\r\n        assertEquals(\"Your ShoppingCart details: \\nStore name: Pull&Bear\\nProduct name: skinny jeans price: 120.0 amount: 3\\n\", output1);\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void updateInventory_Test(){\r\n        sys.login(\"noy\", false);\r\n        String output1 = sys.updateInventory(\"Pull&Bear\", \"t-shirt\", 70, \"Clothing\",\"white t-shirt\", 2);\r\n        assertEquals(\"The product has been added\", output1);\r\n        String output2 = sys.updateInventory(\"Pull&Bear\", \"t-shirt\", 60, \"Clothing\",\"white t-shirt\", 4);\r\n        assertEquals(\"The product has been updated\", output2);\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void appointManager_Test(){\r\n        sys.login(\"noy\", false);\r\n        sys.appointManager(\"prince\", \"Pull&Bear\");\r\n        assertTrue(sys.getStoreByName(\"Pull&Bear\").getManagements().containsKey(sys.getUserByName(\"prince\")));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void removeManager_Test(){\r\n        sys.login(\"noy\", false);\r\n        assertEquals(\"Manager removed successfully!\", sys.removeManager(\"loco\", \"Pull&Bear\"));\r\n        assertEquals(\"Manager wasn't removed\", sys.removeManager(\"maor\", \"Pull&Bear\"));\r\n        assertEquals(\"Manager wasn't removed\", sys.removeManager(\"loco\", \"Swear\"));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void isUserAppointer_Test(){\r\n        sys.login(\"noy\", false);\r\n        assertTrue(sys.isUserAppointer(\"zuzu\", \"Pull&Bear\"));\r\n        assertFalse(sys.isUserAppointer(\"prince\", \"Pull&Bear\"));\r\n        assertFalse(sys.isUserAppointer(\"maor\", \"Swear\"));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void checkIfProductExists_Test(){\r\n        assertTrue(sys.checkIfProductExists(\"Pull&Bear\", \"skinny jeans\"));\r\n        assertFalse(sys.checkIfProductExists(\"Pull&Bear\", \"white top\"));\r\n        assertFalse(sys.checkIfProductExists(\"Swear\", \"black leggings\"));\r\n    }\r\n\r\n    @Test\r\n    public void editPermissions_Test(){\r\n        sys.login(\"noy\", false);\r\n        List<String> p = new LinkedList<>();\r\n        p.add(\"Define Purchase Policy And Type\");\r\n        sys.editPermissions(\"zuzu\", p, \"Pull&Bear\");\r\n        assertTrue(sys.getStoreByName(\"Pull&Bear\").getManagements().get(sys.getUserByName(\"zuzu\")).havePermission(\"Define Purchase Policy And Type\"));\r\n        assertFalse(sys.getStoreByName(\"Pull&Bear\").getManagements().get(sys.getUserByName(\"zuzu\")).getPermission().contains(new Permission(\"View Store Purchase History\")));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void preserveProducts_Test(){\r\n        sys.login(\"noy\", false);\r\n        Store s = sys.getStoreByName(\"Pull&Bear\");\r\n        Basket b = new Basket(s, sys.getActiveUser().getShoppingCart());\r\n        b.addProduct(s.getProductByName(\"skinny jeans\"), 2);\r\n        b.addProduct(s.getProductByName(\"blue top\"), 4);\r\n        sys.getActiveUser().getShoppingCart().addBasket(b);\r\n        sys.reserveProducts();\r\n        assertFalse(s.checkIfProductAvailable(\"blue top\", 1));\r\n        assertFalse(s.checkIfProductAvailable(\"blue top\", 2));\r\n        assertTrue(s.checkIfProductAvailable(\"skinny jeans\", 1));\r\n    }\r\n\r\n    /*\r\n    @Test\r\n    public void appointOwner_Test(){\r\n        sys.login(\"noy\", false);\r\n        sys.appointOwner(\"prince\", \"Pull&Bear\");\r\n        assertTrue(sys.getStoreByName(\"Pull&Bear\").getOwnerships().containsKey(sys.getUserByName(\"prince\")));\r\n        sys.logout();\r\n    }\r\n     */\r\n\r\n    @Test\r\n    public void checkIfActiveUserIsOwner_Test(){\r\n        sys.login(\"noy\", false);\r\n        assertTrue(sys.checkIfActiveUserIsOwner(\"Pull&Bear\"));\r\n        sys.logout();\r\n        sys.login(\"zuzu\", false);\r\n        assertFalse(sys.checkIfActiveUserIsOwner(\"Pull&Bear\"));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void checkIfUserIsOwner_Test(){\r\n        sys.login(\"noy\", false);\r\n        assertFalse(sys.checkIfUserIsOwner(\"Pull&Bear\", \"zuzu\"));\r\n        assertTrue(sys.checkIfUserIsOwner(\"Pull&Bear\", \"noy\"));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void checkIfActiveUserIsManager_Test(){\r\n        sys.login(\"noy\", false);\r\n        assertFalse(sys.checkIfActiveUserIsManager(\"Pull&Bear\"));\r\n        sys.logout();\r\n        sys.login(\"zuzu\", false);\r\n        assertTrue(sys.checkIfActiveUserIsManager(\"Pull&Bear\"));\r\n        sys.logout();\r\n    }\r\n\r\n\r\n    @Test\r\n    public void checkIfUserIsManager_Test(){\r\n        sys.login(\"noy\", false);\r\n        assertTrue(sys.checkIfUserIsManager(\"Pull&Bear\", \"zuzu\"));\r\n        assertFalse(sys.checkIfUserIsManager(\"Pull&Bear\", \"KING\"));\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void checkIfActiveUserSubscribed_Test(){\r\n        assertFalse(sys.checkIfActiveUserSubscribed());\r\n        sys.login(\"noy\", false);\r\n        assertTrue(sys.checkIfActiveUserSubscribed());\r\n        sys.logout();\r\n    }\r\n\r\n    @Test\r\n    public void checkIfUserHavePermission_Test(){\r\n        sys.login(\"noy\", false);\r\n        List<Permission> p = new LinkedList<>();\r\n        p.add(new Permission(\"View Store Purchase History\"));\r\n        sys.getStoreByName(\"Pull&Bear\").getManagements().get(sys.getUserByName(\"zuzu\")).setPermission(p);\r\n        sys.logout();\r\n        sys.login(\"zuzu\", false);\r\n        assertTrue(sys.checkIfUserHavePermission(\"Pull&Bear\", \"View Store Purchase History\"));\r\n        assertFalse(sys.checkIfUserHavePermission(\"Pull&Bear\", \"Appoint New Owner\"));\r\n        sys.logout();\r\n    }\r\n\r\n\r\n    @Rule\r\n    public ExpectedException exceptionRule = ExpectedException.none();\r\n\r\n    @Test\r\n    public void searchProducts_Test(){\r\n\r\n        String output1 =sys.searchProducts(\"skinny jeans\", \"Clothing\", null);\r\n        assertEquals(\"Name: skinny jeans, Category: Clothing, Description: The most comfortable skiny jeans, Price: 120.0\\n\" +\r\n                \"Name: skinny jeans, Category: Clothing, Description: skinny jeans, Price: 100.0\", output1);\r\n\r\n        exceptionRule.expect(RuntimeException.class);\r\n        exceptionRule.expectMessage(\"There are no products that match these parameters\");\r\n        sys.searchProducts(\"skirt\", \"Clothing\", null);\r\n    }\r\n\r\n    @Test\r\n    public void filterResults_Test(){\r\n        sys.searchProducts(\"skinny jeans\", \"Clothing\", null);\r\n        String output1 =sys.filterResults(40, 200, \"Clothing\");\r\n        assertEquals(\"Name: skinny jeans, Category: Clothing, Description: The most comfortable skiny jeans, Price: 120.0\\n\" +\r\n                \"Name: skinny jeans, Category: Clothing, Description: skinny jeans, Price: 100.0\", output1);\r\n        String output2 = sys.filterResults(40, 110, \"Clothing\");\r\n        assertEquals(\"Name: skinny jeans, Category: Clothing, Description: skinny jeans, Price: 100.0\", output2);\r\n        exceptionRule.expect(RuntimeException.class);\r\n        exceptionRule.expectMessage(\"There are no products that match this search filter\");\r\n        sys.filterResults(40, 80, \"Clothing\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- workshopCode/tests/UnitTests/SystemHandler_UT.java	(revision c2a6d85757b741e835ea2be58ba9aeeb67765693)
+++ workshopCode/tests/UnitTests/SystemHandler_UT.java	(date 1592846568536)
@@ -1,19 +1,7 @@
 package UnitTests;
 
-import DomainLayer.TradingSystem.Models.Basket;
-import DomainLayer.TradingSystem.Models.Store;
-import DomainLayer.TradingSystem.Models.User;
-import DomainLayer.TradingSystem.*;
-import org.junit.*;
-import org.junit.rules.ExpectedException;
-
-import java.util.LinkedList;
-import java.util.List;
-
-import static org.junit.Assert.*;
-
 public class SystemHandler_UT {
-
+/*
     private SystemFacade sys;
 
     @Before
@@ -210,7 +198,7 @@
         sys.logout();
     }
      */
-
+/*
     @Test
     public void checkIfActiveUserIsOwner_Test(){
         sys.login("noy", false);
@@ -297,5 +285,5 @@
         exceptionRule.expectMessage("There are no products that match this search filter");
         sys.filterResults(40, 80, "Clothing");
     }
-
+*/
 }
Index: workshopCode/src/DomainLayer/TradingSystem/Models/Store.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DomainLayer.TradingSystem.Models;\r\n\r\nimport DataAccessLayer.PersistenceController;\r\nimport DomainLayer.TradingSystem.*;\r\nimport net.bytebuddy.description.modifier.Ownership;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\n@Entity\r\n@Table(name = \"stores\")\r\npublic class Store implements Serializable {\r\n\r\n    @Transient\r\n    private Inventory inventory;\r\n\r\n    @Id\r\n    @Column(name = \"name\", unique = true)\r\n    private String name;\r\n\r\n    @Column(name = \"description\")\r\n    private String description;\r\n\r\n\r\n    @Column(name = \"storeFirstOwner\")\r\n    private String firstOwnerName;\r\n    @Transient\r\n    private User storeFirstOwner;\r\n\r\n    @Transient\r\n    private ConcurrentHashMap<User, StoreManaging> managements;\r\n    @Transient\r\n    private ConcurrentHashMap<User, StoreOwning> ownerships;\r\n    @Transient\r\n    private ConcurrentHashMap<User, AppointmentAgreement> waitingAgreements;\r\n    @Transient\r\n    private StorePurchaseHistory purchaseHistory;\r\n    @Transient\r\n    private ConcurrentHashMap<Basket, List<ProductItem>> reservedProducts;\r\n    @Transient\r\n    private List<DiscountBInterface> discountPolicies;\r\n    @Transient\r\n    private List<DiscountBInterface> discountsOnProducts;\r\n    @Transient\r\n    private List<DiscountBInterface> discountsOnBasket;\r\n    @Transient\r\n    private List<PurchasePolicy> notStandAlonePolicies;\r\n    @Transient\r\n    private List<PurchasePolicy> purchasePolicies;\r\n    @Transient\r\n    private boolean doubleDiscounts;                    //on products and basketPrice\r\n    @Transient\r\n    private int discountID_counter;\r\n    @Transient\r\n    private int purchaseID_counter;\r\n\r\n    public Store(){};\r\n    public Store(String name, String description, User firstOwner, StoreOwning owning) {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.storeFirstOwner = firstOwner;\r\n        this.firstOwnerName = firstOwner.getUsername();\r\n        this.inventory = new Inventory();\r\n        this.managements = new ConcurrentHashMap<>();\r\n        this.ownerships = new ConcurrentHashMap<>();\r\n        this.ownerships.put(firstOwner, owning);\r\n        this.purchaseHistory = new StorePurchaseHistory(this);\r\n        this.discountPolicies = new ArrayList<>();\r\n        this.discountsOnBasket = new ArrayList<>();\r\n        this.discountsOnProducts = new ArrayList<>();\r\n        this.purchasePolicies = new ArrayList<>();\r\n        this.notStandAlonePolicies = new ArrayList<>();\r\n        this.reservedProducts = new ConcurrentHashMap<>();\r\n        this.waitingAgreements = new ConcurrentHashMap<>();\r\n        this.discountID_counter = 0;\r\n    }\r\n\r\n    public void init() {\r\n        this.storeFirstOwner = SystemFacade.getInstance().getUserByName(firstOwnerName);\r\n        this.inventory = new Inventory();\r\n        inventory.init(name);\r\n        this.ownerships = new ConcurrentHashMap<>();\r\n        this.managements = new ConcurrentHashMap<>();\r\n        this.purchaseHistory = new StorePurchaseHistory(this);\r\n        this.discountPolicies = new ArrayList<>();\r\n        this.discountsOnBasket = new ArrayList<>();\r\n        this.notStandAlonePolicies = new ArrayList<>();\r\n        this.discountsOnProducts = new ArrayList<>();\r\n        this.purchasePolicies = new ArrayList<>();\r\n        this.reservedProducts = new ConcurrentHashMap<>();\r\n        this.waitingAgreements = new ConcurrentHashMap<>();\r\n        this.discountID_counter = 0;\r\n        this.purchaseID_counter = 0;\r\n        this.purchaseID_counter = 0;\r\n        this.doubleDiscounts = true;\r\n    }\r\n\r\n\r\n    public User getStoreFirstOwner() {\r\n        return storeFirstOwner;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public List<DiscountBInterface> getDiscountsOnProducts() {\r\n        return discountsOnProducts;\r\n    }\r\n\r\n    public List<DiscountBInterface> getDiscountPolicies() {\r\n        return discountPolicies;\r\n    }\r\n\r\n    public Collection<Product> getProducts() {\r\n        return inventory.getProducts().keySet();\r\n    }\r\n\r\n    public void setDoubleDiscounts(boolean doubleDiscounts) {\r\n        this.doubleDiscounts = doubleDiscounts;\r\n    }\r\n\r\n\r\n    public ConcurrentHashMap<Product, Integer> getInventory() {\r\n        return inventory.getProducts();\r\n    }\r\n\r\n    public DiscountBInterface getDiscountById(int discountId) {\r\n        for (DiscountBInterface dis : discountsOnProducts) {\r\n            if (dis instanceof DiscountSimple) {\r\n                if (((DiscountSimple) dis).getDiscountID() == discountId)\r\n                    return dis;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public PurchasePolicy getPurchasePolicyById(int purchaseId) {\r\n        for (PurchasePolicy pp : notStandAlonePolicies) {\r\n            if (pp instanceof PurchasePolicyProduct) {\r\n                if (((PurchasePolicyProduct) pp).getPurchaseId() == purchaseId)\r\n                    return pp;\r\n            }\r\n            if (pp instanceof PurchasePolicyStore) {\r\n                if (((PurchasePolicyStore) pp).getPurchaseId() == purchaseId)\r\n                    return pp;\r\n            }\r\n        }\r\n\r\n        for (PurchasePolicy pp : purchasePolicies) {\r\n            if (pp instanceof PurchasePolicyProduct) {\r\n                if (((PurchasePolicyProduct) pp).getPurchaseId() == purchaseId)\r\n                    return pp;\r\n            }\r\n            if (pp instanceof PurchasePolicyStore) {\r\n                if (((PurchasePolicyStore) pp).getPurchaseId() == purchaseId)\r\n                    return pp;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public boolean hasRevDiscountOnProduct(String productName) {\r\n        Product product = getProductByName(productName);\r\n        for (DiscountBInterface dis : discountsOnProducts) {\r\n            if (dis instanceof DiscountCondProductAmount) {\r\n                if (((DiscountRevealedProduct) dis).getProductDiscount().getName().equals(productName)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public DiscountBInterface searchIDInCompDiscount(DiscountBInterface discount, int discountId) {\r\n\r\n        if (discount instanceof DiscountSimple) {\r\n            if (((DiscountSimple) discount).getDiscountID() == discountId) {\r\n                return discount;\r\n            }\r\n        } else {\r\n            DiscountBInterface res1 = searchIDInCompDiscount(((DiscountPolicy) discount).getOperand1(), discountId);\r\n            DiscountBInterface res2 = searchIDInCompDiscount(((DiscountPolicy) discount).getOperand2(), discountId);\r\n            if (res1 != null) {\r\n                return res1;\r\n            }\r\n            if (res2 != null) {\r\n                return res2;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public boolean isOwner(User user) {\r\n        return ownerships.containsKey(user);\r\n    }\r\n\r\n    public boolean isManager(User user) {\r\n        return managements.containsKey(user);\r\n    }\r\n\r\n    public User getAppointer(User user) {\r\n        User appointer = null;\r\n        StoreManaging manage = managements.get(user);\r\n        if (manage != null)\r\n            appointer = manage.getAppointer();\r\n        return appointer;\r\n\r\n    }\r\n\r\n    public void removeManager(User user) {\r\n        //update DB\r\n        PersistenceController.delete(managements.get(user));\r\n\r\n        managements.remove(user);\r\n        user.removeStoreManagement(this);\r\n        NotificationSystem.getInstance().notify(user.getUsername(), \"You have been no longer \" + name + \"'s manager\");\r\n    }\r\n\r\n    public boolean hasProduct(String productName) {\r\n        for (Product p : inventory.getProducts().keySet()) {\r\n            if (p.getName().equals(productName))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Inventory getProductsInventory() {\r\n        return this.inventory;\r\n    }\r\n\r\n    public void addToInventory(String productName, double productPrice, Category productCategory, String productDescription, int amount) {\r\n        Product p = new Product(productName, productCategory, productDescription, productPrice, this.name, amount);\r\n        inventory.getProducts().put(p, amount);\r\n\r\n        // save to DB\r\n        PersistenceController.create(p);\r\n    }\r\n\r\n    public void updateInventory(String productName, double productPrice, Category productCategory, String productDescription, int amount) {\r\n        for (Product p : inventory.getProducts().keySet()) {\r\n            if (p.getName().equals(productName)) {\r\n                p.setPrice(productPrice);\r\n                p.setCategory(productCategory);\r\n                p.setDescription(productDescription);\r\n                inventory.getProducts().put(p, amount);\r\n                p.setQuantity(amount);\r\n                PersistenceController.update(p);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public ConcurrentHashMap<User, StoreManaging> getManagements() {\r\n        return managements;\r\n    }\r\n\r\n    public ConcurrentHashMap<User, StoreOwning> getOwnerships() {\r\n        return ownerships;\r\n    }\r\n\r\n    public void setManagements(ConcurrentHashMap<User, StoreManaging> managements) {\r\n        this.managements = managements;\r\n    }\r\n\r\n    public void addManager(User user, StoreManaging storeManaging, boolean notify) {\r\n        if (!managements.containsKey(user)) {\r\n            managements.put(user, storeManaging);\r\n            if (notify)\r\n                NotificationSystem.getInstance().notify(user.getUsername(), \"You have been appointed as \" + name + \"'s store manager\");\r\n        }\r\n    }\r\n\r\n    // before activating this function make sure the new Owner is registered!!!\r\n    // the function will return true if added successfully and false if the user is already an owner\r\n    public void addStoreOwner(User newOwner, User appointer) {\r\n        if (ownerships.size() == 1) {\r\n            NotificationSystem.getInstance().notify(newOwner.getUsername(), \"Your appointment as owner of\" + name + \"store, is waiting to be approved\");\r\n            StoreOwning storeOwning = new StoreOwning(appointer, name, newOwner.getUsername());\r\n            ownerships.put(newOwner, storeOwning);\r\n            newOwner.addOwnedStore(this, storeOwning);\r\n            PersistenceController.create(ownerships);\r\n        } else {\r\n            if (!waitingAgreements.containsKey(newOwner))\r\n                this.waitingAgreements.put(newOwner, new AppointmentAgreement(ownerships.keySet(), appointer));\r\n            //notify all owners\r\n            for (User u : ownerships.keySet()) {\r\n                if (u.getUsername().equals(appointer.getUsername()))\r\n                    continue;\r\n                NotificationSystem.getInstance().notify(u.getUsername(), \"the appointment of the user: \" + newOwner.getUsername() + \" as owner of: \" + getName() + \" is waiting to your response\");\r\n            }\r\n            NotificationSystem.getInstance().notify(newOwner.getUsername(), \"Your appointment as owner of\" + name + \"store, is waiting to be approved\");\r\n        }\r\n    }\r\n\r\n    public void addStoreOwner(User u, StoreOwning so) {\r\n        this.ownerships.put(u, so);\r\n    }\r\n\r\n    //UC 4.3\r\n    public void approveAppointment(User waitingForApprove, User approveOwner) {\r\n        AppointmentAgreement apag = waitingAgreements.get(waitingForApprove);\r\n        apag.approve(approveOwner);\r\n        if (apag.getWaitingForResponse().size() == 0) {\r\n            if (apag.getDeclined().size() != 0) {\r\n                StoreOwning storeOwning = new StoreOwning(apag.getTheAppointerUser(), name, \"\");//TODO: apointeeName?????\r\n                ownerships.put(waitingForApprove, storeOwning);\r\n                waitingAgreements.remove(waitingForApprove);\r\n                PersistenceController.create(ownerships);\r\n\r\n                //notify that the appointment approved )\r\n                for(User u: ownerships.keySet()) {\r\n                    NotificationSystem.getInstance().notify(u.getUsername(), \"the appointment of the user: \" + waitingForApprove.getUsername() + \" as owner of: \" + getName() + \" is approved\");\r\n                }\r\n            }\r\n            else {\r\n                waitingAgreements.remove(waitingForApprove);\r\n                //notify that the appointment declined\r\n                for(User u: ownerships.keySet()) {\r\n                    NotificationSystem.getInstance().notify(u.getUsername(), \"the appointment of the user: \" + waitingForApprove.getUsername() + \" as owner of: \" + getName() + \" is declined\");\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    //UC 4.3\r\n    public void declinedAppointment(User waitingForApprove, User declinedOwner) {\r\n        AppointmentAgreement apag = waitingAgreements.get(waitingForApprove);\r\n        apag.decline(declinedOwner);\r\n    }\r\n\r\n\r\n    //for each inventory in the basket - checks if the product meets the purchase policy requirements\r\n    //if it does - reserve the product and adds it to the reserved inventory list\r\n    public void reserveBasket(Basket b) {\r\n        //this field save all the inventory that have been reserved\r\n        this.reservedProducts.put(b, new LinkedList<>());\r\n        for (PurchasePolicy p : purchasePolicies) {\r\n            if (!p.purchaseAccordingToPolicy(b))\r\n                throw new RuntimeException(\"Your purchase doesn’t match the store’s policy\");\r\n        }\r\n        Collection<ProductItem> products = b.getProductItems();\r\n        for (ProductItem pi : products) {\r\n            Product p = pi.getProduct();\r\n            int amount = pi.getAmount();\r\n            if (!this.inventory.reserveProduct(p, amount)) {\r\n                throw new RuntimeException(\"There is currently no stock of \" + amount + \" \" + p.getName() + \" products\");\r\n            }\r\n            this.reservedProducts.get(b).add(pi);\r\n        }\r\n    }\r\n\r\n    public List<ProductItem> getReservedProducts(Basket b) {\r\n        return this.reservedProducts.get(b);\r\n    }\r\n\r\n    public void unreserveBasket(Basket b) {\r\n        for (ProductItem pi : this.reservedProducts.get(b)) {\r\n            this.inventory.unreserveProduct(pi.getProduct(), pi.getAmount());\r\n            PersistenceController.create(pi);\r\n        }\r\n    }\r\n\r\n    public double calculateTotalCheck(Basket b) {\r\n        double priceAfterDiscount = b.calcBasketPrice();\r\n        double priceBeforDiscount = b.calcBasketPriceBeforeDiscount();\r\n        double tempPrice = priceAfterDiscount;\r\n\r\n        if (doubleDiscounts || (priceAfterDiscount == priceBeforDiscount)) {\r\n            for (DiscountBInterface dis : discountsOnBasket) {\r\n                if (dis.canGet(b)) {\r\n                    double newPrice = ((DiscountSimple) dis).calc(b);\r\n                    if (newPrice < tempPrice) {\r\n                        tempPrice = newPrice;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        b.setPrice(tempPrice);\r\n        return tempPrice;\r\n    }\r\n\r\n\r\n    public void addStorePurchaseHistory(Basket b, User u) {\r\n        Purchase p = new Purchase(b, u);\r\n        p.getPurchasedProducts().computeCartPrice();\r\n        this.purchaseHistory.addPurchase(p);\r\n\r\n        // save to db\r\n        PersistenceController.create(p);\r\n        PersistenceController.update(p.getPurchasedProducts());\r\n    }\r\n\r\n\r\n    public StorePurchaseHistory getPurchaseHistory() {\r\n        return this.purchaseHistory;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n\r\n    public void addDiscountCondProductAmount(String productName, int percentage, int limit) {\r\n        Product p = this.getProductByName(productName);\r\n        if (p != null)\r\n            discountsOnProducts.add(new DiscountCondProductAmount(discountID_counter, limit, p, percentage));\r\n        discountID_counter++;\r\n    }\r\n\r\n    public void addDiscountCondBasketProducts(String productDiscount, String productCond, int percentage, int limit) {\r\n        Product pDiscount = this.getProductByName(productDiscount);\r\n        Product pCond = this.getProductByName(productCond);\r\n        if (pDiscount != null && pCond != null)\r\n            discountsOnProducts.add(new DiscountCondBasketProducts(discountID_counter, pCond, pDiscount, limit, percentage));\r\n        discountID_counter++;\r\n    }\r\n\r\n    public void addDiscountRevealedForProduct(String productName, int percentage) {\r\n        Product p = this.getProductByName(productName);\r\n        if (p != null)\r\n            discountsOnProducts.add(new DiscountRevealedProduct(discountID_counter, p, percentage));\r\n        discountID_counter++;\r\n    }\r\n\r\n    public void addDiscountForBasket(int percentage, int limit, boolean onprice) {\r\n        discountsOnBasket.add(new DiscountBasketPriceOrAmount(discountID_counter, limit, percentage, onprice));\r\n        discountID_counter++;\r\n\r\n    }\r\n\r\n    public void addDiscountPolicy(DiscountBInterface discountPolicy) {\r\n        discountPolicies.add(discountPolicy);\r\n    }\r\n\r\n    public void addPurchasePolicy(PurchasePolicy purchasePolicy) {\r\n        purchasePolicies.add(purchasePolicy);\r\n    }\r\n\r\n    public void addSimplePurchasePolicyStore(int limit, boolean minOrMax, boolean standAlone) {\r\n        if (standAlone) {\r\n            purchasePolicies.add(new PurchasePolicyStore(limit, minOrMax, purchaseID_counter));\r\n            purchaseID_counter++;\r\n        } else {\r\n            notStandAlonePolicies.add(new PurchasePolicyStore(limit, minOrMax, purchaseID_counter));\r\n            purchaseID_counter++;\r\n        }\r\n    }\r\n\r\n    public void addSimplePurchasePolicyProduct(String productName, int limit, boolean minOrMax, boolean standAlone) {\r\n        if (standAlone) {\r\n            purchasePolicies.add(new PurchasePolicyProduct(productName, limit, minOrMax, purchaseID_counter));\r\n            purchaseID_counter++;\r\n        } else {\r\n            notStandAlonePolicies.add(new PurchasePolicyProduct(productName, limit, minOrMax, purchaseID_counter));\r\n            purchaseID_counter++;\r\n        }\r\n    }\r\n\r\n    public String viewDiscount() {\r\n        JSONArray discountsdes = new JSONArray();\r\n        for (DiscountBInterface dis : discountsOnProducts) {\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"discountId\", ((DiscountSimple) dis).getDiscountID());\r\n            curr.put(\"discountString\", dis.discountDescription());\r\n            discountsdes.add(curr);\r\n        }\r\n\r\n        for(DiscountBInterface dis :discountsOnBasket){\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"discountId\", ((DiscountSimple)dis).getDiscountID());\r\n            curr.put(\"discountString\", dis.discountDescription());\r\n            discountsdes.add(curr);\r\n        }\r\n        for(DiscountBInterface dis :discountPolicies){\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"discountPolicyString\", dis.discountDescription());\r\n            discountsdes.add(curr);\r\n        }\r\n\r\n        return discountsdes.toJSONString();\r\n    }\r\n\r\n    public String viewDiscountForChoose(){\r\n        JSONArray discountsdes = new JSONArray();\r\n        for(DiscountBInterface dis :discountsOnProducts){\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"discountId\", ((DiscountSimple)dis).getDiscountID());\r\n            curr.put(\"discountString\", dis.discountDescription());\r\n            discountsdes.add(curr);\r\n        }\r\n\r\n        return discountsdes.toJSONString();\r\n    }\r\n\r\n    public String viewPurchasePolicies(){\r\n        JSONArray purchaePolicy = new JSONArray();\r\n        for(PurchasePolicy pp :purchasePolicies){\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"purchaseString\", pp.getPurchaseDescription());\r\n            purchaePolicy.add(curr);\r\n        }\r\n\r\n        return purchaePolicy.toJSONString();\r\n    }\r\n\r\n    public String viewPurchasePoliciesForChoose(){\r\n        JSONArray purchaePolicy = new JSONArray();\r\n        for(PurchasePolicy pp :purchasePolicies) {\r\n            if (pp instanceof PurchasePolicyStore) {\r\n                JSONObject curr = new JSONObject();\r\n                curr.put(\"policyId\", ((PurchasePolicyStore) pp).getPurchaseId());\r\n                curr.put(\"description\", (pp.getPurchaseDescription()));\r\n                purchaePolicy.add(curr);\r\n            }\r\n            else if(pp instanceof PurchasePolicyProduct){\r\n                JSONObject curr = new JSONObject();\r\n                curr.put(\"policyId\", ((PurchasePolicyProduct) pp).getPurchaseId());\r\n                curr.put(\"description\", (pp.getPurchaseDescription()));\r\n                purchaePolicy.add(curr);\r\n            }\r\n        }\r\n\r\n        for(PurchasePolicy pp : notStandAlonePolicies) {\r\n            if (pp instanceof PurchasePolicyStore) {\r\n                JSONObject curr = new JSONObject();\r\n                curr.put(\"policyId\", ((PurchasePolicyStore) pp).getPurchaseId());\r\n                curr.put(\"description\", (pp.getPurchaseDescription()));\r\n                purchaePolicy.add(curr);\r\n            }\r\n            else if(pp instanceof PurchasePolicyProduct){\r\n                JSONObject curr = new JSONObject();\r\n                curr.put(\"policyId\", ((PurchasePolicyProduct) pp).getPurchaseId());\r\n                curr.put(\"description\", (pp.getPurchaseDescription()));\r\n                purchaePolicy.add(curr);\r\n            }\r\n        }\r\n\r\n        return purchaePolicy.toJSONString();\r\n    }\r\n\r\n\r\n    public void notifyOwners(Basket b, String userName) {\r\n        String msg = userName + \" bought some products from the store \" + name + \" you own: \";\r\n        for (ProductItem pi : b.getProductItems()) {\r\n            msg += pi.getProduct().getName() + \", \";\r\n        }\r\n        msg.substring(0, msg.length() - 2);\r\n        msg += \".\";\r\n        for (User u : ownerships.keySet()) {\r\n            NotificationSystem.getInstance().notify(u.getUsername(), msg);\r\n        }\r\n    }\r\n\r\n    public JSONArray getAllProducts() {\r\n        JSONArray products = new JSONArray();\r\n        for (Product p : getInventory().keySet()) {\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"name\", p.getName());\r\n            curr.put(\"price\", p.getPrice());\r\n            curr.put(\"store\", this.name);\r\n            curr.put(\"description\", p.getDescription());\r\n            products.add(curr);\r\n        }\r\n\r\n        return products;\r\n    }\r\n\r\n    public String getProductsJS() {\r\n        JSONArray products = new JSONArray();\r\n        for (Product p : getInventory().keySet()) {\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"name\", p.getName());\r\n            curr.put(\"description\", p.getDescription());\r\n            curr.put(\"price\", p.getPrice());\r\n            curr.put(\"amount\", getInventory().get(p));\r\n            curr.put(\"category\", p.getCategory().name());\r\n            products.add(curr);\r\n        }\r\n        return products.toJSONString();\r\n    }\r\n\r\n    public String appointmentWaitingForUser(User owner){\r\n        //List<String> output = new ArrayList<>();\r\n        JSONArray usernames = new JSONArray();\r\n        for(User user : waitingAgreements.keySet()){\r\n            AppointmentAgreement aa = waitingAgreements.get(user);\r\n            if(aa.getWaitingForResponse().contains(owner)){\r\n                JSONObject curr = new JSONObject();\r\n                curr.put(\"userName\", user.getUsername());\r\n                usernames.add(curr);\r\n            }\r\n        }\r\n        return usernames.toJSONString();\r\n    }\r\n\r\n    public Product getProductByName(String name) {\r\n        return this.inventory.getProductByName(name);\r\n    }\r\n\r\n    public boolean checkIfProductAvailable(String productName, int amount) {\r\n        return this.inventory.checkIfProductAvailable(productName, amount);\r\n    }\r\n\r\n    public void removeDiscountPolicies() {\r\n        this.discountPolicies = new ArrayList<>();\r\n    }\r\n    public void removePurchasePolicies(){\r\n        this.purchasePolicies = new ArrayList<>();\r\n    }\r\n\r\n    //for store unit test\r\n    public void reserveProduct(Product p, int amount) {\r\n        this.inventory.reserveProduct(p, amount);\r\n    }\r\n\r\n    public void initPurchaseHistory() {\r\n        List<Purchase> purchases = PersistenceController.readPurchaseHistory(this.name);\r\n        for(Purchase p: purchases){\r\n            p.setCart(PersistenceController.readCartById(p.getCartId()));\r\n            ShoppingCart sc = p.getPurchasedProducts();\r\n            sc.setUser(SystemFacade.getInstance().getUserByName(sc.getUserName()));\r\n            sc.initBaskets(sc);\r\n            this.purchaseHistory.addPurchase(p);\r\n        }\r\n\r\n    }\r\n\r\n    public User getOwnerAppointer(User user) {\r\n        User appointer = null;\r\n        StoreOwning manage = ownerships.get(user);\r\n        if(manage != null)\r\n            appointer = manage.getAppointer();\r\n        return appointer;\r\n\r\n    }\r\n\r\n    public void removeOwner(User user){\r\n        for(User manUser : managements.keySet()){\r\n            if(managements.get(manUser).getAppointer().equals(user)){\r\n                //sand alert to the user being removed from managers list\r\n                NotificationSystem.getInstance().notify(manUser.getUsername(), \"your appointment as manager of: \" + getName() + \" is canceled\");\r\n                manUser.removeStoreManagement(this);\r\n                managements.remove(manUser);\r\n            }\r\n        }\r\n        for(User ownUser : ownerships.keySet()){\r\n            if(ownerships.get(ownUser).getAppointer().equals(user)){\r\n                //sand alert to the user being removed from owners list\r\n                NotificationSystem.getInstance().notify(ownUser.getUsername(), \"your appointment as owner of: \" + getName() + \" is canceled\");\r\n                ownUser.getStoreOwnings().remove(this);\r\n                ownerships.remove(ownUser);\r\n            }\r\n        }\r\n        NotificationSystem.getInstance().notify(user.getUsername(), \"your appointment as owner of: \" + getName() + \" is canceled\");\r\n        ownerships.remove(user);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- workshopCode/src/DomainLayer/TradingSystem/Models/Store.java	(revision c2a6d85757b741e835ea2be58ba9aeeb67765693)
+++ workshopCode/src/DomainLayer/TradingSystem/Models/Store.java	(date 1592782479765)
@@ -2,7 +2,6 @@
 
 import DataAccessLayer.PersistenceController;
 import DomainLayer.TradingSystem.*;
-import net.bytebuddy.description.modifier.Ownership;
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
 
@@ -286,13 +285,14 @@
 
     // before activating this function make sure the new Owner is registered!!!
     // the function will return true if added successfully and false if the user is already an owner
-    public void addStoreOwner(User newOwner, User appointer) {
+    public String addStoreOwner(User newOwner, User appointer) {
         if (ownerships.size() == 1) {
             NotificationSystem.getInstance().notify(newOwner.getUsername(), "Your appointment as owner of" + name + "store, is waiting to be approved");
             StoreOwning storeOwning = new StoreOwning(appointer, name, newOwner.getUsername());
             ownerships.put(newOwner, storeOwning);
             newOwner.addOwnedStore(this, storeOwning);
             PersistenceController.create(ownerships);
+            return"the appointment of the new owner is done successfully";
         } else {
             if (!waitingAgreements.containsKey(newOwner))
                 this.waitingAgreements.put(newOwner, new AppointmentAgreement(ownerships.keySet(), appointer));
@@ -304,6 +304,8 @@
             }
             NotificationSystem.getInstance().notify(newOwner.getUsername(), "Your appointment as owner of" + name + "store, is waiting to be approved");
         }
+        return"the appointment of the new owner is waiting for the owners response";
+
     }
 
     public void addStoreOwner(User u, StoreOwning so) {
@@ -311,7 +313,7 @@
     }
 
     //UC 4.3
-    public void approveAppointment(User waitingForApprove, User approveOwner) {
+    public String approveAppointment(User waitingForApprove, User approveOwner) {
         AppointmentAgreement apag = waitingAgreements.get(waitingForApprove);
         apag.approve(approveOwner);
         if (apag.getWaitingForResponse().size() == 0) {
@@ -325,6 +327,7 @@
                 for(User u: ownerships.keySet()) {
                     NotificationSystem.getInstance().notify(u.getUsername(), "the appointment of the user: " + waitingForApprove.getUsername() + " as owner of: " + getName() + " is approved");
                 }
+                return "your response was updated successfully - the new appointment approved";
             }
             else {
                 waitingAgreements.remove(waitingForApprove);
@@ -332,15 +335,26 @@
                 for(User u: ownerships.keySet()) {
                     NotificationSystem.getInstance().notify(u.getUsername(), "the appointment of the user: " + waitingForApprove.getUsername() + " as owner of: " + getName() + " is declined");
                 }
-
+                return "your response was updated successfully - the new appointment declined";
             }
         }
+        return "your response was updated successfully";
     }
 
     //UC 4.3
-    public void declinedAppointment(User waitingForApprove, User declinedOwner) {
+    public String declinedAppointment(User waitingForApprove, User declinedOwner) {
         AppointmentAgreement apag = waitingAgreements.get(waitingForApprove);
         apag.decline(declinedOwner);
+        if (apag.getWaitingForResponse().size() == 0) {
+            waitingAgreements.remove(waitingForApprove);
+            //notify that the appointment declined
+            for(User u: ownerships.keySet()) {
+                NotificationSystem.getInstance().notify(u.getUsername(), "the appointment of the user: " + waitingForApprove.getUsername() + " as owner of: " + getName() + " is declined");
+            }
+            return "your response was updated successfully - the new appointment declined";
+        }
+        return "your response was updated successfully";
+
     }
 
 
@@ -649,13 +663,15 @@
 
     }
 
-    public void removeOwner(User user){
+    public String removeOwner(User user){
+        String output = "more appointments was deleted: ";
         for(User manUser : managements.keySet()){
             if(managements.get(manUser).getAppointer().equals(user)){
                 //sand alert to the user being removed from managers list
                 NotificationSystem.getInstance().notify(manUser.getUsername(), "your appointment as manager of: " + getName() + " is canceled");
                 manUser.removeStoreManagement(this);
                 managements.remove(manUser);
+                output = output + manUser.getUsername()+"-manager ";
             }
         }
         for(User ownUser : ownerships.keySet()){
@@ -664,10 +680,13 @@
                 NotificationSystem.getInstance().notify(ownUser.getUsername(), "your appointment as owner of: " + getName() + " is canceled");
                 ownUser.getStoreOwnings().remove(this);
                 ownerships.remove(ownUser);
+                output = output + ownUser.getUsername()+"-owner ";
+
             }
         }
         NotificationSystem.getInstance().notify(user.getUsername(), "your appointment as owner of: " + getName() + " is canceled");
         ownerships.remove(user);
+        return output;
     }
 
 }
\ No newline at end of file
Index: configurations/test1.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- configurations/test1.ini	(date 1592837646959)
+++ configurations/test1.ini	(date 1592837646959)
@@ -0,0 +1,20 @@
+Register, u1, 1234
+Register, u2, 1234
+Register, u3, 1234
+Register, u4, 1234
+Register, u5, 1234
+Register, u6, 1234
+Add Admin, u1
+Login, u2, 1234
+Open New Store, s1, desc
+Update Inventory, s1, diapers, 30, BeautyProducts, for babies, 20
+Add Store Manager, u3, s1
+Edit Manager Permissions, u3, s1, Add Manager, Manage Supply
+Logout
+Login, u3, 1234
+Add Store Manager, u5, s1
+Edit Manager Permissions, u5, s1, Add Manager
+Logout
+Login, u5, 1234
+Add Store Manager, u6, s1
+Logout
\ No newline at end of file
Index: workshopCode/tests/AcceptanceTests/UC4_4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- workshopCode/tests/AcceptanceTests/UC4_4.java	(date 1592783433145)
+++ workshopCode/tests/AcceptanceTests/UC4_4.java	(date 1592783433145)
@@ -0,0 +1,144 @@
+package AcceptanceTests;
+
+import DomainLayer.TradingSystem.SystemFacade;
+import ServiceLayer.SessionHandler;
+import ServiceLayer.StoreHandler;
+import ServiceLayer.StoreManagerHandler;
+import ServiceLayer.UsersHandler;
+import org.junit.*;
+
+import java.util.UUID;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class UC4_4 {
+
+    private static StoreHandler storeHandler;
+    private static UUID session_id;
+
+    @BeforeClass
+    public static void init() throws Exception{
+        session_id = (new SessionHandler()).openNewSession();
+        storeHandler = new StoreHandler();
+
+        // store owner (appointer)
+        (new UsersHandler()).register("nufi", "1234");
+
+        // subscribed user (appointee1)
+        (new UsersHandler()).register("tooti", "1234");
+        // subscribed user (appointee2)
+        (new UsersHandler()).register("lior", "1234");
+
+        (new UsersHandler()).login(session_id, "nufi", "1234", false);
+
+        (new StoreHandler()).openNewStore(session_id, "KKW", "best Kim Kardashian beauty products");
+    }
+
+    @AfterClass
+    public static void clean() {
+        (new UsersHandler()).resetUsers();
+        (new StoreHandler()).resetStores();
+        (new SessionHandler()).closeSession(session_id);
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        storeHandler.resetStores();
+        (new StoreHandler()).openNewStore(session_id, "KKW", "best Kim Kardashian beauty products");
+    }
+
+    @Test
+    public void valid1() {
+        String result = storeHandler.addStoreOwner(session_id, "tooti", "KKW");
+        //add the second owner - dont need approvement
+        assertEquals("{\"SUCCESS\":\"the appointment of the new owner is done successfully\"}", result);
+        String result1 = storeHandler.removeStoreOwner(session_id, "tooti", "KKW");
+        assertEquals("owner been removed successfully, more appointments was deleted: ", result1);
+
+    }
+    @Test
+    public void valid2() {
+        UUID sessionId2 = (new SessionHandler()).openNewSession();
+        (new UsersHandler()).login(sessionId2,"tooti","1234", false);
+        String result = storeHandler.addStoreOwner(session_id, "tooti", "KKW");
+        //add the second owner - dont need approvement
+        assertEquals("{\"SUCCESS\":\"the appointment of the new owner is done successfully\"}", result);
+        //tooti add new manager
+        (new StoreManagerHandler()).addStoreManager(sessionId2,"lior", "KKW");
+
+        String result1 = storeHandler.removeStoreOwner(session_id, "tooti", "KKW");
+        assertEquals("owner been removed successfully, more appointments was deleted: lior-manager", result1);
+        (new UsersHandler()).logout(sessionId2);
+    }
+
+
+
+    @Test
+    public void emptyInput(){
+        storeHandler.addStoreOwner(session_id, "tooti", "KKW");
+        try{
+            storeHandler.removeStoreOwner(session_id, "", "KKW");
+            fail();
+        }catch(Exception e) {
+            assertEquals("Must enter username and store name", e.getMessage());
+        }
+        try{
+            storeHandler.removeStoreOwner(session_id, "tooti", "");
+            fail();
+        }catch(Exception e) {
+            assertEquals("Must enter username and store name", e.getMessage());
+        }
+        try{
+            storeHandler.removeStoreOwner(session_id, null, "KKW");
+            fail();
+        }catch(Exception e) {
+            assertEquals("Must enter username and store name", e.getMessage());
+        }
+        try{
+            storeHandler.removeStoreOwner(session_id, "tooti", null);
+            fail();
+        }catch(Exception e) {
+            assertEquals("Must enter username and store name", e.getMessage());
+        }
+    }
+
+    @Test
+    public void storeDoesNotExist(){
+        storeHandler.addStoreOwner(session_id, "tooti", "KKW");
+
+        try{
+            String result = storeHandler.removeStoreOwner(session_id, "tooti", "poosh");
+            fail();
+        }catch(Exception e) {
+            assertEquals("This store doesn't exist", e.getMessage());
+        }
+    }
+
+    @Test
+    public void userDoesNotExist(){
+        storeHandler.addStoreOwner(session_id, "tooti", "KKW");
+        try{
+            String result = storeHandler.removeStoreOwner(session_id, "tooton", "KKW");
+            fail();
+        }catch(Exception e) {
+            assertEquals("This username doesn't exist", e.getMessage());
+        }
+    }
+
+    @Test
+    public void appointerIsNotOwner() {
+        SystemFacade.getInstance().logout(session_id);
+        SystemFacade.getInstance().register("toya");
+        SystemFacade.getInstance().login(session_id, "toya", false);
+        try{
+            String result = storeHandler.removeStoreOwner(session_id, "tooti", "KKW");
+            fail();
+        }catch(Exception e) {
+            assertEquals("You must be this store owner for this action", e.getMessage());
+        }
+        SystemFacade.getInstance().logout(session_id);
+        SystemFacade.getInstance().login(session_id, "nufi", false);
+    }
+
+}
Index: workshopCode/src/ServiceLayer/StoreHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ServiceLayer;\r\n\r\nimport DomainLayer.TradingSystem.SystemFacade;\r\nimport DomainLayer.TradingSystem.SystemLogger;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\n\r\nimport java.util.UUID;\r\n\r\n\r\npublic class StoreHandler {\r\n\r\n    public String openNewStore(UUID session_id, String storeName, String storeDescription){\r\n        SystemLogger.getInstance().writeEvent(String.format(\"Open new store command: store name - %s, store description - %s\", storeName, storeDescription));\r\n        String[] args = {storeName, storeDescription};\r\n\r\n        try {\r\n            if (!SystemFacade.getInstance().checkIfActiveUserSubscribed(session_id))\r\n                throw new RuntimeException(\"Only subscribed users can open a new store\");\r\n            if (SystemFacade.getInstance().emptyString(args))\r\n                throw new IllegalArgumentException(\"Must enter store name and description\");\r\n            if (SystemFacade.getInstance().storeExists(storeName))\r\n                throw new RuntimeException(\"Store name already exists, please choose a different one\");\r\n            return createJSONMsg(\"SUCCESS\", SystemFacade.getInstance().openNewStore(session_id,storeName,storeDescription));\r\n        }\r\n        catch (RuntimeException e){\r\n            SystemLogger.getInstance().writeError(\"Open new store error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n            //return e.getMessage();\r\n        }\r\n    }\r\n\r\n    public String addStoreOwner(UUID session_id, String username, String storeName) {\r\n        SystemLogger.getInstance().writeEvent(String.format(\"Add store owner command: new owner username - %s, store name - %s\",username,storeName));\r\n        try {\r\n            String[] args = {username, storeName};\r\n            if (SystemFacade.getInstance().emptyString(args))\r\n                throw new IllegalArgumentException(\"Must enter username and store name\");\r\n            if (!SystemFacade.getInstance().storeExists(storeName))\r\n                throw new IllegalArgumentException(\"This store doesn't exist\");\r\n            if(!SystemFacade.getInstance().userExists(username))\r\n                throw new IllegalArgumentException(\"This username doesn't exist\");\r\n            if(!SystemFacade.getInstance().checkIfActiveUserIsOwner(session_id, storeName))\r\n                throw new RuntimeException(\"You must be this store owner for this action\");\r\n            if(SystemFacade.getInstance().checkIfUserIsOwner(storeName, username))\r\n                throw new RuntimeException(\"This username is already one of the store's owners\");\r\n            return createJSONMsg(\"SUCCESS\", SystemFacade.getInstance().appointOwner(session_id, username, storeName));\r\n        }\r\n        catch (Exception e){\r\n            SystemLogger.getInstance().writeError(\"Add store owner error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n            //return e.getMessage();\r\n        }\r\n    }\r\n\r\n    public String responseToAppointmentRequest(UUID SessionID,  String storeName, String username, boolean isApproved) {\r\n        SystemLogger.getInstance().writeEvent(String.format(\"Response to store owner appointment command: new owner username - %s, store name - %s\",username,storeName));\r\n        try {\r\n            String[] args = {username, storeName};\r\n            if (SystemFacade.getInstance().emptyString(args))\r\n                throw new IllegalArgumentException(\"Must enter username and store name\");\r\n            if (!SystemFacade.getInstance().storeExists(storeName))\r\n                throw new IllegalArgumentException(\"This store doesn't exist\");\r\n            if(!SystemFacade.getInstance().userExists(username))\r\n                throw new IllegalArgumentException(\"This username doesn't exist\");\r\n            if(!SystemFacade.getInstance().checkIfActiveUserIsOwner(SessionID, storeName))\r\n                throw new RuntimeException(\"You must be this store owner for this action\");\r\n            if(SystemFacade.getInstance().checkIfUserIsOwner(storeName, username))\r\n                throw new RuntimeException(\"This username is already one of the store's owners\");\r\n            return createJSONMsg(\"SUCCESS\", SystemFacade.getInstance().responseToAppointment(SessionID, username, storeName, isApproved));\r\n        }\r\n        catch (Exception e){\r\n            SystemLogger.getInstance().writeError(\"Response to store owner appointment error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n            //return e.getMessage();\r\n        }\r\n    }\r\n\r\n    public String removeStoreOwner(UUID session_id, String username,String storename){\r\n        //SystemLogger.getInstance().writeError(String.format(\"Remove manager command: username - %s, store name - %s\",argToString(username),argToString(storename)));\r\n        try{\r\n            String[] args = {username,storename};\r\n            if(SystemFacade.getInstance().emptyString(args))\r\n                throw new IllegalArgumentException(\"Must enter username and store name\");\r\n            if(!SystemFacade.getInstance().storeExists(storename))\r\n                throw new IllegalArgumentException(\"This store doesn't exist\");\r\n            if(!SystemFacade.getInstance().userExists(username))\r\n                throw new IllegalArgumentException(\"This username doesn't exist\");\r\n            if(!SystemFacade.getInstance().checkIfActiveUserIsOwner(session_id, storename))\r\n                throw new RuntimeException(\"You must be this store owner for this command\");\r\n            if(!SystemFacade.getInstance().isOwnerAppointer(session_id,storename, username))\r\n                throw new RuntimeException(\"This username is not one of this store's managers appointed by you\");\r\n            return SystemFacade.getInstance().removeStoreOwner(username,storename);\r\n            //return SystemFacade.getInstance().removeManager(username,storename);\r\n        } catch(Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Remove manager error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n            //return createJSONMsg(\"ERROR\", e.getMessage());\r\n            //return e.getMessage();\r\n        }\r\n    }\r\n\r\n    public String UpdateInventory(UUID session_id, String storeName, String productName, Double productPrice, String productCategory, String productDes, Integer amount){\r\n        SystemLogger.getInstance().writeEvent(String.format(\"Update inventory command: store name - %s, product name - %s, product price - %f, product category - %s, product description - %s, amount - %d\", storeName, productName, productPrice, productCategory, productDes, amount));\r\n        try {\r\n            String[] args = {storeName, productName};\r\n            if (SystemFacade.getInstance().emptyString(args) || amount <= 0)\r\n                throw new IllegalArgumentException(\"Must enter store name, and product info\");\r\n            if (!SystemFacade.getInstance().storeExists(storeName))\r\n                throw new IllegalArgumentException(\"This store doesn't exist\");\r\n            if (!SystemFacade.getInstance().userHasEditPrivileges(session_id, storeName))\r\n                throw new IllegalArgumentException(\"Must have editing privileges\");\r\n            String[] args2 = {productDes};\r\n            if(SystemFacade.getInstance().checkIfProductExists(storeName,productName)){\r\n                if((amount == null && SystemFacade.getInstance().emptyString(args2)) || (amount != null && amount <0))\r\n                    throw new IllegalArgumentException(\"Must enter amount bigger than 0 or product description\");\r\n            }\r\n            else {\r\n                if(amount == null || SystemFacade.getInstance().emptyString(args2) || amount < 0)\r\n                    throw new IllegalArgumentException(\"Must enter amount bigger than 0 and product description\");\r\n            }\r\n            return  createJSONMsg(\"SUCCESS\", SystemFacade.getInstance().updateInventory(storeName, productName, productPrice, productCategory, productDes, amount));\r\n            //return SystemFacade.getInstance().updateInventory(storeName, productName, productPrice, productCategory, productDes, amount);\r\n        }\r\n        catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Update inventory error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n            //return createJSONMsg(\"ERROR\", e.getMessage());\r\n            //return e.getMessage();\r\n        }\r\n    }\r\n\r\n    public String addDiscountCondProductAmount(String storeName, String productName, int percentage, int amount) {\r\n\r\n        try {\r\n            String[] args = {storeName, productName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if (percentage > 100 || percentage < 0) {\r\n                throw new IllegalArgumentException(\"Invalid percentage value: must be between 0 and 100\");\r\n            }\r\n            if (amount < 0) {\r\n                throw new IllegalArgumentException(\"Invalid amount value: must be more then 0 \");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            if (!SystemFacade.getInstance().checkIfProductExists(storeName, productName)) {\r\n                throw new IllegalArgumentException(\"Cant add the discount on this product\");\r\n            }\r\n            SystemFacade.getInstance().addDiscountCondProductAmount(storeName, productName, percentage, amount);\r\n            return createJSONMsg(\"SUCCESS\", \"The discount has been added successfully\");\r\n\r\n        } catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Add Discount For product: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String addDiscountRevealedProduct(String storeName, String productName, int percentage){\r\n\r\n        try{\r\n            String[] args = {storeName, productName};\r\n            if(SystemFacade.getInstance().emptyString(args)){\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if(percentage > 100 || percentage < 0){\r\n                throw new IllegalArgumentException(\"Invalid percentage value: must be between 0 and 100\");\r\n            }\r\n            if(!SystemFacade.getInstance().storeExists(storeName)){\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            if(!SystemFacade.getInstance().checkIfProductExists(storeName, productName) && SystemFacade.getInstance().productHasDiscount(storeName, productName)){\r\n                throw new IllegalArgumentException(\"Cant add the discount on this product\");\r\n            }\r\n            SystemFacade.getInstance().addDiscountRevealedProduct(storeName, productName, percentage );\r\n            return createJSONMsg(\"SUCCESS\",\"The discount has been added successfully\");\r\n\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"Add Discount For product: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String addDiscountCondBasketProducts(String storeName, String productDiscount, String condProduct, int percentage, int amount){\r\n\r\n        try{\r\n            String[] args = {storeName, productDiscount, condProduct};\r\n            if(SystemFacade.getInstance().emptyString(args)){\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if(percentage > 100 || percentage < 0){\r\n                throw new IllegalArgumentException(\"Invalid percentage value: must be between 0 and 100\");\r\n            }\r\n            if(amount < 0){\r\n                throw new IllegalArgumentException(\"Invalid amount value: must be more then 0 \");\r\n            }\r\n            if(!SystemFacade.getInstance().storeExists(storeName)){\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            if(!SystemFacade.getInstance().checkIfProductExists(storeName, productDiscount) || !SystemFacade.getInstance().checkIfProductExists(storeName, productDiscount)){\r\n                throw new IllegalArgumentException(\"productCond or productDiscount does not exist in the store\");\r\n            }\r\n            SystemFacade.getInstance().addDiscountCondBasketProducts(storeName, productDiscount, condProduct, percentage, amount);\r\n            return createJSONMsg(\"SUCCESS\",\"The discount has been added successfully\");\r\n\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"Add Discount For product: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String addDiscountForBasketPriceOrAmount(String storeName,  int percentage, int amount, boolean onPrice) {\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if (percentage > 100 || percentage < 0) {\r\n                throw new IllegalArgumentException(\"Invalid percentage value: must be between 0 and 100\");\r\n            }\r\n            if (amount < 0) {\r\n                throw new IllegalArgumentException(\"Invalid amount value: must be more then 0 \");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n\r\n            SystemFacade.getInstance().addDiscountOnBasket(storeName, percentage, amount, onPrice);\r\n            return createJSONMsg(\"SUCCESS\",\"The discount has been added successfully\");\r\n\r\n        } catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Add Discount For Basket error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public String addPurchasePolicyProduct(String storeName, String productName, int amount, boolean minOrMax, boolean standAlone) {\r\n\r\n        try {\r\n            String[] args = {storeName, productName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if (amount < 0 ) {\r\n                throw new IllegalArgumentException(\"Invalid percentage value: must be more then 0 \");\r\n            }\r\n\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            if (!SystemFacade.getInstance().checkIfProductExists(storeName, productName)) {\r\n                throw new IllegalArgumentException(\"Cant add the policy on this product\");\r\n            }\r\n            SystemFacade.getInstance().addPurchasePolicyProduct(storeName, productName, amount, minOrMax, standAlone);\r\n            return createJSONMsg(\"SUCCESS\", \"The purchase policy has been added successfully\");\r\n\r\n        } catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Add purchase policy For product: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String addPurchasePolicyStore(String storeName, int amount, boolean minOrMax, boolean standAlone) {\r\n\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name \");\r\n            }\r\n            if (amount < 0 ) {\r\n                throw new IllegalArgumentException(\"Invalid limit : must be more then 0\");\r\n            }\r\n\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n\r\n            SystemFacade.getInstance().addPurchasePolicyStore(storeName, amount, minOrMax, standAlone);\r\n            return createJSONMsg(\"SUCCESS\", \"The purchase policy has been added successfully\");\r\n\r\n        } catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Add purchase policy For product: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public String viewAllDiscounts(String storeName){\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            return SystemFacade.getInstance().viewDiscounts(storeName);\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"View Discounts error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String viewDiscounts(String storeName){\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            return SystemFacade.getInstance().viewDiscountsForChoose(storeName);\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"View Discounts for choose error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String viewPurchasePolicies(String storeName){\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name and product name\");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            return SystemFacade.getInstance().viewPurchasePoliciesForChoose(storeName);\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"View purchase policy for choose error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String viewAllPurchasePolicies(String storeName){\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name \");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            return SystemFacade.getInstance().viewPurchasePolicies(storeName);\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"View purchase policy error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String addDiscountPolicy(String discountPolicy){\r\n        try{\r\n\r\n            String result = SystemFacade.getInstance().addDiscountPolicy(discountPolicy);\r\n            return createJSONMsg(\"SUCCESS\", result);\r\n        }\r\n        catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Add Discount Policy error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String addPurchasePolicy(String purchasePolicy){\r\n        try{\r\n            String result = SystemFacade.getInstance().addPurchasePolicy(purchasePolicy);\r\n            return createJSONMsg(\"SUCCESS\", result);\r\n        }\r\n        catch (Exception e) {\r\n            SystemLogger.getInstance().writeError(\"Add Discount Policy error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public String getAllWaitingAppointments(UUID session_id, String storeName){\r\n        try {\r\n            String[] args = {storeName};\r\n            if (SystemFacade.getInstance().emptyString(args)) {\r\n                throw new IllegalArgumentException(\"Must enter store name \");\r\n            }\r\n            if (!SystemFacade.getInstance().storeExists(storeName)) {\r\n                throw new IllegalArgumentException(\"The store doesn't exist\");\r\n            }\r\n            return SystemFacade.getInstance().waitingAppointments(session_id, storeName);\r\n        }\r\n        catch(Exception e){\r\n            SystemLogger.getInstance().writeError(\"get All Waiting Appointments error: \" + e.getMessage());\r\n            throw new RuntimeException(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public String getStoreProducts(String storeName) {\r\n        return SystemFacade.getInstance().getAllProducts(storeName);\r\n    }\r\n\r\n    public void resetStores(){\r\n        SystemFacade.getInstance().resetStores();\r\n    }\r\n    public void removeDiscountPolicies(String storeName){\r\n        SystemFacade.getInstance().removePolicies(storeName);\r\n    }\r\n    public void removePurchasePolicies(String storeName){\r\n        SystemFacade.getInstance().removePurchasePolicies(storeName);\r\n    }\r\n\r\n    public String getMyStores(UUID session_id){\r\n        return SystemFacade.getInstance().myStores(session_id);\r\n    }\r\n\r\n    public String checkAmountInInventory(String productName, String storeName) {\r\n        return SystemFacade.getInstance().checkAmountInInventory(productName, storeName);\r\n    }\r\n\r\n\r\n    public String createJSONMsg(String type, String content) {\r\n        JSONObject response = new JSONObject();\r\n        response.put(type, content);\r\n        return response.toJSONString();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- workshopCode/src/ServiceLayer/StoreHandler.java	(revision c2a6d85757b741e835ea2be58ba9aeeb67765693)
+++ workshopCode/src/ServiceLayer/StoreHandler.java	(date 1592783415133)
@@ -2,7 +2,6 @@
 
 import DomainLayer.TradingSystem.SystemFacade;
 import DomainLayer.TradingSystem.SystemLogger;
-import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
 
 import java.util.UUID;
@@ -89,7 +88,7 @@
             if(!SystemFacade.getInstance().checkIfActiveUserIsOwner(session_id, storename))
                 throw new RuntimeException("You must be this store owner for this command");
             if(!SystemFacade.getInstance().isOwnerAppointer(session_id,storename, username))
-                throw new RuntimeException("This username is not one of this store's managers appointed by you");
+                throw new RuntimeException("This username is not one of this store's owners appointed by you");
             return SystemFacade.getInstance().removeStoreOwner(username,storename);
             //return SystemFacade.getInstance().removeManager(username,storename);
         } catch(Exception e) {
Index: workshopCode/src/DomainLayer/TradingSystem/SystemFacade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DomainLayer.TradingSystem;\r\n\r\n\r\nimport DataAccessLayer.PersistenceController;\r\nimport ExternalSystems.PaymentCollectionStub;\r\nimport ExternalSystems.ProductSupplyStub;\r\nimport DomainLayer.TradingSystem.Models.*;\r\nimport DomainLayer.Security.SecurityFacade;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class SystemFacade {\r\n    private static SystemFacade ourInstance = new SystemFacade();\r\n    public static SystemFacade getInstance() {\r\n        return ourInstance;\r\n    }\r\n\r\n    private ConcurrentHashMap<UUID,Session> active_sessions;\r\n    private ConcurrentHashMap<String, User> users;\r\n    private ConcurrentHashMap<String, Store> stores;\r\n    private List<User> adminsList;\r\n    private PaymentCollectionStub PC;\r\n    private ProductSupplyStub PS;\r\n\r\n    private SystemFacade() {\r\n\r\n        users = new ConcurrentHashMap<>();\r\n        active_sessions = new ConcurrentHashMap<>();\r\n        users = new ConcurrentHashMap<>();\r\n        stores = new ConcurrentHashMap<>();\r\n        adminsList = new ArrayList<>();\r\n        PC = new PaymentCollectionStub();\r\n        PS = new ProductSupplyStub();\r\n    }\r\n\r\n    public void initSystem(){\r\n        User firstAdmin = new User();\r\n        firstAdmin.setUsername(\"Admin159\");\r\n        firstAdmin.setIsAdmin();\r\n        SecurityFacade.getInstance().addUser(\"Admin159\", \"951\");\r\n\r\n\r\n        this.adminsList.add(firstAdmin);\r\n        this.users.put(\"Admin159\", firstAdmin);\r\n        NotificationSystem.getInstance().addUser(\"Admin159\");\r\n    }\r\n\r\n    public UUID createNewSession(){\r\n        Session newSession = new Session();\r\n        active_sessions.put(newSession.getSession_id(), newSession);\r\n        return newSession.getSession_id();\r\n    }\r\n\r\n    public void closeSession(UUID session_id){\r\n        if(!active_sessions.containsKey(session_id))\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        String username = active_sessions.get(session_id).getLoggedin_user().getUsername();\r\n        if(username != null)\r\n            NotificationSystem.getInstance().logOutUser(username);\r\n        active_sessions.remove(session_id);\r\n    }\r\n\r\n    public void init() {\r\n        initSubscribedUsers();\r\n        initAdmins();\r\n        initStores();\r\n        initCarts();\r\n        initPurchaseHistory();\r\n    }\r\n\r\n\r\n\r\n    private void initSubscribedUsers() {\r\n        List<User> allSubscribedUsers = PersistenceController.readAllUsers(false);\r\n\r\n        for (User user: allSubscribedUsers) {\r\n            users.put(user.getUsername(), user);\r\n            NotificationSystem.getInstance().addUser(user.getUsername());\r\n            NotificationSystem.getInstance().logOutUser(user.getUsername());\r\n        }\r\n    }\r\n\r\n    private void initAdmins() {\r\n        List<User> allAdmins = PersistenceController.readAllUsers(true);\r\n\r\n        for (User user: allAdmins) {\r\n            adminsList.add(user);\r\n        }\r\n    }\r\n\r\n    private void initCarts() {\r\n        for(User u: this.users.values()){\r\n            u.initCart();\r\n        }\r\n    }\r\n\r\n    private void initStores() {\r\n        List<Store> allStores = PersistenceController.readAllStores();\r\n\r\n        for (Store s: allStores) {\r\n            s.init();\r\n            initManagments(s);\r\n            initOwnerships(s);\r\n            stores.put(s.getName(), s);\r\n        }\r\n    }\r\n\r\n    private void initManagments(Store store) {\r\n        List<StoreManaging> sm = PersistenceController.readAllManagers(store.getName());\r\n        User currUser;\r\n        for (StoreManaging s: sm){\r\n            s.initPermissions();\r\n            if(s.getAppoinerName() != null)\r\n                s.setAppointer(getUserByName(s.getAppoinerName()));\r\n            currUser = getUserByName(s.getAppointeeName());\r\n            currUser.addManagedStore(store, s);\r\n            users.replace(currUser.getUsername(), currUser);\r\n            store.addManager(currUser, s, false);\r\n        }\r\n    }\r\n\r\n    private void initOwnerships(Store store) {\r\n        List<StoreOwning> so = PersistenceController.readAllOwners(store.getName());\r\n        User currUser;\r\n        for (StoreOwning s:so){\r\n            s.initPermissions();\r\n            if(s.getAppoinerName() != null)\r\n                s.setAppointer(getUserByName(s.getAppoinerName()));\r\n            currUser = getUserByName(s.getAppointeeName());\r\n            currUser.addOwnedStore(store, s);\r\n            users.replace(currUser.getUsername(), currUser);\r\n            store.addStoreOwner(currUser, s);\r\n\r\n        }\r\n    }\r\n\r\n    private void initPurchaseHistory() {\r\n\r\n        for(User u : this.users.values()){\r\n            u.initPurchaseHistory();\r\n        }\r\n\r\n        for(Store s : this.stores.values()){\r\n            s.initPurchaseHistory();\r\n        }\r\n    }\r\n\r\n    public User getUserByName(String username) {\r\n        return users.get(username);\r\n    }\r\n\r\n    public Store getStoreByName(String storeName) {\r\n        return stores.get(storeName);\r\n    }\r\n\r\n    public ConcurrentHashMap<String, Store> getStores() {\r\n        return stores;\r\n    }\r\n\r\n    public void setStores(ConcurrentHashMap<String, Store> stores) {\r\n        this.stores = stores;\r\n    }\r\n\r\n    public void setUsers(ConcurrentHashMap<String, User> newUsers) {\r\n        users = newUsers;\r\n    }\r\n\r\n    //reset functions\r\n    public void resetUsers(){\r\n        users.clear();\r\n        adminsList.clear();\r\n        initSystem();\r\n    }\r\n\r\n    public void resetStores(){\r\n        for(Store s : stores.values()){\r\n            for(Product p : s.getInventory().keySet()){\r\n                PersistenceController.delete(p);\r\n            }\r\n        }\r\n        stores.clear();\r\n    }\r\n\r\n    //function for handling UseCase 2.2\r\n    public void register(String username) {\r\n\r\n        User newUser = new User();\r\n        newUser.setUsername(username);\r\n        users.put(username, newUser);\r\n        NotificationSystem.getInstance().addUser(username);\r\n\r\n        //save to DB\r\n        PersistenceController.create(newUser);\r\n        PersistenceController.create(newUser.getShoppingCart());\r\n    }\r\n\r\n    //help function for register use case\r\n    public boolean userExists(String username){\r\n        return users.containsKey(username);\r\n    }\r\n\r\n    //function for handling UseCase 2.5\r\n    public String searchProducts(UUID session_id, String name, String category, String[] keywords){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n\r\n        se.clearSearchResults();\r\n\r\n        boolean searchName = name == null ? false : !name.equals(\"\");\r\n        boolean searchCategory = category == null ? false : !category.equals(\"\");\r\n        boolean searchKKeywords = keywords == null ? false : !String.join(\"\",keywords).equals(\"\");\r\n        //List<Product> matching=  new ArrayList<>();\r\n        JSONArray matching = new JSONArray();\r\n        for(Store s : stores.values()){\r\n            for(Product p : s.getProducts()){\r\n                if(searchName&&!p.getName().contains(name))\r\n                    continue;\r\n                if(searchCategory&&!category.equals(p.getCategory().name()))\r\n                    continue;\r\n                if(searchKKeywords&&!p.getKeyWords().containsAll(Arrays.asList(keywords)))\r\n                    continue;\r\n                JSONObject curr = new JSONObject();\r\n                curr.put(\"name\", p.getName());\r\n                curr.put(\"price\", p.getPrice());\r\n                curr.put(\"store\", s.getName());\r\n                curr.put(\"description\", p.getDescription());\r\n                se.addToSearchResults(p);\r\n                matching.add(curr);\r\n            }\r\n        }\r\n        if(matching.size()==0)\r\n            throw new RuntimeException(\"There are no products that match these parameters\");\r\n//        lastSearchResult = matching;\r\n        return matching.toJSONString();\r\n        //return productListToString(lastSearchResult);\r\n    }\r\n\r\n    private String productListToString(List<Product> products){\r\n        StringBuilder output = new StringBuilder();\r\n        for(Product p : products){\r\n            output.append(\"Name: \").append(p.getName()).append(\", Category: \").append(p.getCategory().name()).append(\", Description: \").append(p.getDescription()).append(\", Price: \").append(p.getPrice()).append(\"\\n\");\r\n        }\r\n        return output.toString().strip();\r\n    }\r\n\r\n    //function for handling UseCase 2.5\r\n    public String filterResults(UUID session_id, Integer minPrice, Integer maxPrice, String category){\r\n        boolean searchCategory = category == null ? false : !category.equals(\"\");\r\n        //List<Product> matching = new ArrayList<>();\r\n        JSONArray matching = new JSONArray();\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        for(Product p : se.getLastSearchResult()){\r\n            if(searchCategory&&!category.equals(p.getCategory().name()))\r\n                continue;\r\n            if(minPrice!=null&&p.getPrice()<minPrice)\r\n                continue;\r\n            if(maxPrice!=null&&p.getPrice()>maxPrice)\r\n                continue;\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"name\", p.getName());\r\n            curr.put(\"price\", p.getPrice());\r\n            //TODO: ADD STORE TO PRODUCT !!\r\n            curr.put(\"store\", \"\");\r\n            curr.put(\"description\", p.getDescription());\r\n            matching.add(curr);\r\n        }\r\n        if(matching.size()==0)\r\n            throw new RuntimeException(\"There are no products that match this search filter\");\r\n        return matching.toJSONString();\r\n        //return productListToString(matching);\r\n    }\r\n\r\n    //function for handling UseCase 2.6\r\n    public void addToShoppingBasket(UUID session_id, String store, String product, int amount){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        se.getLoggedin_user().getShoppingCart().addProduct(product, stores.get(store), amount);\r\n    }\r\n\r\n    //helper function for UseCase 2.6\r\n    public boolean storeExists(String storeName){\r\n        return stores.containsKey(storeName);\r\n    }\r\n\r\n    //helper function for UseCase 2.6\r\n    public boolean isProductAvailable(String store, String product, int amount){\r\n        return stores.get(store).checkIfProductAvailable(product, amount);\r\n    }\r\n\r\n    // function for handling UseCase 2.3\r\n    public void login(UUID session_id, String username, boolean adminMode) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        User user = users.get(username);\r\n        se.setAdminMode(adminMode);\r\n        se.setLoggedin_user(user);\r\n        NotificationSystem.getInstance().logInUser(username);\r\n    }\r\n\r\n    //function for handling UseCase 3.1\r\n    public String logout(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        if(se.getLoggedin_user().getUsername() != null) {\r\n            NotificationSystem.getInstance().logOutUser(se.getLoggedin_user().getUsername());\r\n\r\n            // save data to db\r\n            PersistenceController.update(se.getLoggedin_user().getShoppingCart());\r\n            PersistenceController.update(se.getLoggedin_user());\r\n        }\r\n        NotificationSystem.getInstance().logOutUser(se.getLoggedin_user().getUsername());\r\n        se.setLoggedin_user(new User());\r\n        return \"You have been successfully logged out!\";\r\n    }\r\n\r\n    //function for handling Use Case 2.7\r\n    public String viewSoppingCart(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.getLoggedin_user().getShoppingCart().view();\r\n    }\r\n\r\n    // function for use case 2.7\r\n    public String editShoppingCart(UUID session_id, String storeName, String productName, int amount){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        Store store = stores.get(storeName);\r\n        return se.getLoggedin_user().getShoppingCart().edit(store, productName, amount);\r\n\r\n    }\r\n\r\n    //function for handling Use Case 4.1\r\n    public String updateInventory(String storeName, String productName, double productPrice, String productCategory, String productDescription, int amount){\r\n        Store s = stores.get(storeName);\r\n        if (!s.hasProduct(productName)) {\r\n            s.addToInventory(productName, productPrice, Category.valueOf(productCategory), productDescription, amount);\r\n            return \"The product has been added\";\r\n        }\r\n        else {\r\n            s.updateInventory(productName, productPrice, Category.valueOf(productCategory), productDescription, amount);\r\n            return \"The product has been updated\";\r\n        }\r\n    }\r\n\r\n    //helper function for Use Case 4.1\r\n    public boolean userHasEditPrivileges(UUID session_id, String storeName){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.getLoggedin_user().hasEditPrivileges(storeName);\r\n    }\r\n\r\n    // function for handling Use Case 4.7\r\n    public String removeManager(String username,String storename){\r\n        Store store = stores.get(storename);\r\n        User user = users.get(username);\r\n        JSONObject response = new JSONObject();\r\n        if(store != null && user != null) {\r\n            store.removeManager(user);\r\n            response.put(\"SUCCESS\", \"Manager removed successfully!\");\r\n            return response.toJSONString();\r\n            //return \"Manager removed successfully!\";\r\n        }\r\n        response.put(\"ERROR\", \"Manager wasn't removed\");\r\n        return response.toJSONString();\r\n        //return \"Manager wasn't removed\";\r\n    }\r\n\r\n\r\n    //helper function for Use Case 4.7\r\n    public boolean isUserAppointer(UUID session_id, String username, String storename){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        Store store = stores.get(storename);\r\n        User user = users.get(username);\r\n        if(store == null || user == null)\r\n            return false;\r\n        User appointer = store.getAppointer(user);\r\n        if(appointer == null)\r\n            return false;\r\n        return appointer.equals(se.getLoggedin_user());\r\n    }\r\n\r\n    public String appointManager(UUID session_id, String username, String storeName){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        Store store = stores.get(storeName);\r\n        User appointed_user = users.get(username);\r\n\r\n        // update store and user\r\n        StoreManaging managing = new StoreManaging(se.getLoggedin_user(), storeName, username);\r\n        store.addManager(appointed_user, managing, true);\r\n        appointed_user.addManagedStore(store, managing);\r\n\r\n        // save to db\r\n        PersistenceController.create(managing);\r\n\r\n        return \"Username has been added as one of the store managers successfully\";\r\n    }\r\n\r\n    public boolean emptyString(String[] args){\r\n        for (String s: args) {\r\n            if (s == null || s.equals(\"\"))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean allEmptyString(String[] args){\r\n        for (String s: args) {\r\n            if (s != null && !s.equals(\"\"))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // function for handling Use Case 3.2 written by Nufar\r\n    public String openNewStore(UUID session_id, String storeName, String storeDescription) {\r\n\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n\r\n        // update stores of the system and the user's data\r\n        StoreOwning storeOwning = new StoreOwning(storeName, se.getLoggedin_user().getUsername());\r\n        Store newStore = new Store(storeName, storeDescription, se.getLoggedin_user(), storeOwning);\r\n\r\n        se.getLoggedin_user().addOwnedStore(newStore, storeOwning);\r\n        this.stores.put(storeName, newStore);\r\n\r\n        //save store in DB\r\n        PersistenceController.create(newStore);\r\n\r\n        return \"The new store is now open!\";\r\n    }\r\n\r\n    // function for handling Use Case 3.7 - written by Nufar\r\n    public String getActiveUserPurchaseHistory(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return getUserPurchaseHistory(se.getLoggedin_user().getUsername());\r\n    }\r\n\r\n    // function for handling Use Case 3.7 + 6.4 - written by Nufar\r\n    public String getUserPurchaseHistory(String userName) {\r\n        JSONParser parser = new JSONParser();\r\n        UserPurchaseHistory purchaseHistory = this.users.get(userName).getPurchaseHistory();\r\n        JSONArray historyArray = new JSONArray();\r\n        for(Purchase p: purchaseHistory.getUserPurchases()){\r\n            try {\r\n                JSONArray h = (JSONArray) parser.parse(p.getPurchasedProducts().viewOnlyProducts());\r\n                historyArray.add(h);\r\n            }catch(Exception e){System.out.println(e.getMessage());};\r\n        }\r\n        return historyArray.toJSONString();\r\n//        String historyOutput = \"Shopping history:\" + \"\\n\";\r\n//\r\n//        int counter = 1;\r\n//        for (Purchase p : purchaseHistory.getUserPurchases()) {\r\n//            historyOutput = historyOutput + \"\\n\" + \"Purchase #\" + counter + \":\" + \"\\n\";\r\n//            historyOutput = historyOutput + p.getPurchasedProducts().viewOnlyProducts();\r\n//            historyOutput = historyOutput + \"\\n\" + \"total money paid: \" + p.getTotalCheck();\r\n//            counter++;\r\n//        }\r\n//        return historyOutput;\r\n    }\r\n\r\n    // function for handling Use Case 4.10 and 6.4 - written by Nufar\r\n    public String getStorePurchaseHistory(String storeName) {\r\n        JSONParser parser = new JSONParser();\r\n        StorePurchaseHistory purchaseHistory = this.stores.get(storeName).getPurchaseHistory();\r\n        JSONArray historyArray = new JSONArray();\r\n        for (Purchase p : purchaseHistory.getStorePurchases()) {\r\n            try {\r\n                JSONArray currPurch = (JSONArray) parser.parse(p.getPurchasedProducts().viewOnlyProducts());\r\n                historyArray.add(currPurch);\r\n            }catch(Exception e){System.out.println(e.getMessage());};\r\n        }\r\n        return historyArray.toJSONString();\r\n//        String historyOutput = \"Shopping history of the store:\" + \"\\n\";\r\n//        int counter = 1;\r\n//        for (Purchase p : purchaseHistory.getStorePurchases()) {\r\n//            historyOutput = historyOutput + \"\\n\" + \"Purchase #\" + counter + \":\" + \"\\n\";\r\n//            historyOutput = historyOutput + p.getPurchasedProducts().viewOnlyProducts();\r\n//            historyOutput = historyOutput + \"\\n\" + \"total money paid: \" + p.getTotalCheck();\r\n//            counter++;\r\n//        }\r\n//        return historyOutput;\r\n\r\n    }\r\n\r\n    // function for handling Use Case 4.6 - written by Noy\r\n    public String editPermissions(String userName, List<String> permissions, String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        User user = getUserByName(userName);\r\n\r\n        List<Permission> p = new LinkedList<>();\r\n        for(String per: permissions){\r\n            p.add(new Permission(per));\r\n        }\r\n\r\n        store.getManagements().get(user).setPermission(p);\r\n        return \"Privileges have been edited successfully\";\r\n    }\r\n\r\n    // function for handling Use Case 2.4 - written by Noy\r\n    public String viewStoreInfo(String storeName){\r\n\r\n        Store s = getStoreByName(storeName);\r\n        Collection<Product> products = s.getProducts();\r\n        JSONObject response = new JSONObject();\r\n        response.put(\"name\", s.getName());\r\n        response.put(\"description\", s.getDescription());\r\n        JSONArray productsArray = new JSONArray();\r\n        for (Product currProduct : products) {\r\n            JSONObject curr = new JSONObject();\r\n            curr.put(\"productName\", currProduct.getName());\r\n            curr.put(\"price\", currProduct.getPrice());\r\n            productsArray.add(curr);\r\n        }\r\n        response.put(\"products\", productsArray);\r\n        return response.toJSONString();\r\n//        String storeInfo = \"Store name: \" + s.getName() +\r\n//                \" description: \"  + s.getDescription() +\r\n//                \"\\n products:\\n\";\r\n//\r\n//        for (Product currProduct : products) {\r\n//            storeInfo = storeInfo.concat(\"  \" + currProduct.getName() + \"- \" + currProduct.getPrice() + \"$\\n\");\r\n//        }\r\n//        return storeInfo;\r\n    }\r\n\r\n    // function for handling Use Case 2.4 - written by Noy\r\n    public String viewProductInfo(String storeName, String productName){\r\n        Store s = getStoreByName(storeName);\r\n        Product p = s.getProductByName(productName);\r\n        JSONObject response = new JSONObject();\r\n        response.put(\"name\", p.getName());\r\n        response.put(\"description\", p.getDescription());\r\n        response.put(\"price\", p.getPrice());\r\n        return response.toJSONString();\r\n//        return (p.getName() + \": \" + p.getDescription() + \"\\nprice: \" + p.getPrice() + \"$\");\r\n    }\r\n\r\n    // function for handling Use Case 2.8 - written by Noy\r\n    public void reserveProducts(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        se.getLoggedin_user().getShoppingCart().reserveBaskets();\r\n    }\r\n\r\n    // function for handling Use Case 2.8 - written by Noy\r\n    public void computePrice(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        se.getLoggedin_user().getShoppingCart().computeCartPrice();\r\n    }\r\n\r\n    // function for handling Use Case 2.8 - written by Noy\r\n    public boolean payment(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        ShoppingCart sc = se.getLoggedin_user().getShoppingCart();\r\n        if(!PC.pay(sc.getTotalCartPrice(), se.getLoggedin_user())){\r\n            sc.unreserveProducts();\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    // function for handling Use Case 2.8 - written by Noy\r\n    public boolean supply(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        ShoppingCart sc = se.getLoggedin_user().getShoppingCart();\r\n        if(!PS.supply(sc.getBaskets(), se.getLoggedin_user())) {\r\n            sc.unreserveProducts();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // function for handling Use Case 2.8 - written by Noy\r\n    public void addPurchaseToHistory(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        ShoppingCart sc = se.getLoggedin_user().getShoppingCart();\r\n\r\n        sc.setIsHistory();\r\n\r\n        //handle User-Purchase-History\r\n        Purchase newPurchase = new Purchase(sc);\r\n        se.getLoggedin_user().addPurchaseToHistory(newPurchase);\r\n\r\n        //handle Store-Purchase-History\r\n        sc.addStoresPurchaseHistory();\r\n\r\n        //notify all stores owners that products have been purchased in their store\r\n        sc.notifyOwners();\r\n\r\n        //finally - empty the shopping cart\r\n        se.getLoggedin_user().emptyCart();\r\n\r\n        // update cart state\r\n        PersistenceController.update(sc);\r\n\r\n    }\r\n\r\n\r\n    // function for handling Use Case 4.3 - written by Nufar\r\n    public String appointOwner(UUID session_id, String username, String storeName) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        Store store = stores.get(storeName);\r\n        User appointed_user = users.get(username);\r\n\r\n        // update store and user\r\n        StoreOwning owning = new StoreOwning(se.getLoggedin_user(), storeName, username);\r\n        store.addStoreOwner(appointed_user, se.getLoggedin_user());\r\n        appointed_user.addOwnedStore(store, owning);\r\n\r\n\r\n        return \"Username has been added as one of the store owners successfully\";\r\n\r\n    }\r\n\r\n    public ConcurrentHashMap<String, User> getUsers() {\r\n        return users;\r\n    }\r\n\r\n    public boolean checkIfActiveUserIsOwner(UUID session_id, String storeName) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        Store store = stores.get(storeName);\r\n        return store.isOwner(se.getLoggedin_user());\r\n    }\r\n\r\n    public boolean checkIfUserIsOwner(String storName, String userName) {\r\n        return stores.get(storName).isOwner(this.users.get(userName));\r\n    }\r\n\r\n    public boolean checkIfActiveUserIsManager(UUID session_id, String storeName) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return stores.get(storeName).isManager(se.getLoggedin_user());\r\n    }\r\n\r\n    public boolean checkIfUserIsManager(String storName, String userName) {\r\n        return stores.get(storName).isManager(this.users.get(userName));\r\n    }\r\n\r\n    public boolean checkIfProductInCart(UUID session_id, String storName, String productName) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.getLoggedin_user().getShoppingCart().isProductInCart(productName, stores.get(storName));\r\n    }\r\n\r\n    public boolean checkIfActiveUserSubscribed(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.getLoggedin_user().getUsername() != null;\r\n    }\r\n\r\n    public boolean checkIfUserIsAdmin( String userName) {\r\n        User user = getUserByName(userName);\r\n        return adminsList.contains(user);\r\n    }\r\n\r\n    public boolean checkIfBasketExists(UUID session_id, String storeName) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.getLoggedin_user().getShoppingCart().isBasketExists(getStoreByName(storeName));\r\n    }\r\n\r\n    public void addAdmin(String userName){\r\n        User user = users.get(userName);\r\n        user.setIsAdmin();\r\n        adminsList.add(user);\r\n        PersistenceController.update(user);\r\n    }\r\n\r\n    public boolean checkIfInAdminMode(UUID session_id) {\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.isAdminMode();\r\n    }\r\n\r\n    public void resetAdmins(){\r\n        adminsList = new ArrayList<>();\r\n    }\r\n\r\n\r\n    // function fir handling Use Case 3b - written by Nufar\r\n    public List<String> getProductsNamesAndKeywords() {\r\n        List<String> res = new LinkedList<>();\r\n        for (Store store: this.stores.values()) {\r\n            res.addAll(store.getProducts().stream().map(p -> p.getName()).collect(Collectors.toList()));\r\n            res.addAll(store.getProducts().stream().map(p -> p.getKeyWords()).\r\n                    reduce(new LinkedList<String>(), (ans, i)-> {\r\n                        ans.addAll(i);\r\n                        return ans;\r\n                    }));\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    public boolean cartIsEmpty(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return se.getLoggedin_user().getShoppingCart().isEmpty();\r\n    }\r\n\r\n    public boolean checkIfUserHavePermission(UUID session_id, String storeName, String permission){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        if(!storeExists(storeName))\r\n            return false;\r\n        Store s = getStoreByName(storeName);\r\n        return s.getManagements().get(se.getLoggedin_user()).havePermission(permission);\r\n    }\r\n\r\n    public boolean checkIfProductExists(String storeName, String productName) {\r\n        Store s = stores.get(storeName);\r\n        if(s == null || s.getProductByName(productName) == null)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public void emptyCart(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        se.getLoggedin_user().emptyCart();\r\n    }\r\n\r\n\r\n    public void addDiscountCondProductAmount(String storeName, String productName, int percentage, int amount){\r\n        Store s = getStoreByName(storeName);\r\n        s.addDiscountCondProductAmount(productName, percentage, amount);\r\n    }\r\n\r\n    public void addDiscountCondBasketProducts(String storeName, String productDiscount, String productCond, int percentage, int amount){\r\n        Store s = getStoreByName(storeName);\r\n        s.addDiscountCondBasketProducts(productDiscount, productCond, percentage, amount);\r\n    }\r\n    public void addDiscountRevealedProduct(String storeName, String productName, int percentage){\r\n        Store s = getStoreByName(storeName);\r\n        s.addDiscountRevealedForProduct(productName, percentage);\r\n    }\r\n\r\n    public void addDiscountOnBasket(String storeName, int percentage, int amount, boolean onAll){\r\n        Store s = getStoreByName(storeName);\r\n        s.addDiscountForBasket(percentage, amount, onAll);\r\n    }\r\n\r\n    public void addPurchasePolicyProduct(String storeName, String productName, int amount, boolean minOrMax, boolean standAlone){\r\n        Store s = getStoreByName(storeName);\r\n        s.addSimplePurchasePolicyProduct(productName, amount, minOrMax, standAlone);\r\n    }\r\n\r\n    public void addPurchasePolicyStore(String storeName, int amount, boolean minOrMax, boolean standAlone){\r\n        Store s = getStoreByName(storeName);\r\n        s.addSimplePurchasePolicyStore( amount, minOrMax, standAlone);\r\n    }\r\n\r\n    public boolean productHasDiscount(String storeName, String productName){\r\n        Store s = getStoreByName(storeName);\r\n        return s.hasRevDiscountOnProduct(productName);\r\n\r\n    }\r\n\r\n    public String myStores(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        JSONArray response = new JSONArray();\r\n        ConcurrentHashMap<Store, StoreOwning> ownings = se.getLoggedin_user().getStoreOwnings();\r\n        ConcurrentHashMap<Store, StoreManaging> managements = se.getLoggedin_user().getStoreManagements();\r\n        if(!ownings.isEmpty()){\r\n            for(Store s: ownings.keySet()){\r\n                JSONObject currStore = new JSONObject();\r\n                currStore.put(\"name\", s.getName());\r\n                currStore.put(\"type\", \"Owner\");\r\n                JSONArray options = new JSONArray();\r\n                for(Permission p: ownings.get(s).getPermission())\r\n                    options.add(p.getAllowedAction());\r\n                currStore.put(\"options\", options);\r\n                response.add(currStore);\r\n            }\r\n        }\r\n\r\n        if(!managements.isEmpty()){\r\n            for(Store s: managements.keySet()){\r\n                JSONObject currStore = new JSONObject();\r\n                currStore.put(\"name\", s.getName());\r\n                currStore.put(\"type\", \"Manager\");\r\n                JSONArray options = new JSONArray();\r\n                for(Permission p: managements.get(s).getPermission())\r\n                    options.add(p.getAllowedAction());\r\n                currStore.put(\"options\", options);\r\n                response.add(currStore);\r\n            }\r\n        }\r\n\r\n        return response.toJSONString();\r\n    }\r\n\r\n    public String getAllProducts(){\r\n        JSONArray response = new JSONArray();\r\n        for(Store s: this.stores.values()) {\r\n            JSONArray curr = s.getAllProducts();\r\n            for(int i = 0; i < curr.size(); i++)\r\n                response.add(curr.get(i));\r\n        }\r\n\r\n        return response.toJSONString();\r\n    }\r\n\r\n    public String getAllCategories(){\r\n        Category[] categories = Category.values();\r\n        JSONArray response = new JSONArray();\r\n        for(int i = 0; i < categories.length; i++) {\r\n            response.add(categories[i].name());\r\n        }\r\n\r\n        return response.toJSONString();\r\n    }\r\n\r\n    public String getAllProducts(String store) {\r\n        Store s = getStoreByName(store);\r\n        if(s != null)\r\n            return s.getProductsJS();\r\n        return new JSONArray().toJSONString();\r\n    }\r\n\r\n    public String viewDiscounts(String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        return store.viewDiscount();\r\n    }\r\n\r\n    public String viewDiscountsForChoose(String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        return store.viewDiscountForChoose();\r\n    }\r\n\r\n    public String viewPurchasePolicies(String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        return store.viewPurchasePolicies();\r\n    }\r\n\r\n    public String viewPurchasePoliciesForChoose(String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        return store.viewPurchasePoliciesForChoose();\r\n    }\r\n\r\n    public DiscountBInterface searchDiscountById(String storeName, int discountId){\r\n        DiscountBInterface discount = getStoreByName(storeName).getDiscountById(discountId);\r\n        return discount;\r\n    }\r\n\r\n\r\n    public DiscountBInterface buildDiscountPolicy(JSONObject policy, String storeName) {\r\n        DiscountBInterface newPolicy = null;\r\n        String type = (policy.containsKey(\"type\")) ? ((String) policy.get(\"type\")) : null;\r\n        if(type.equals(\"compose\")){\r\n            String operator = (policy.containsKey(\"operator\")) ? ((String) policy.get(\"operator\")) : null;\r\n            if(operator.equals(\"IF_THEN\")){\r\n                JSONObject operand1 = (policy.containsKey(\"operand1\")) ? ((JSONObject) policy.get(\"operand1\")) : null;\r\n                JSONObject operand2 = (policy.containsKey(\"operand2\")) ? ((JSONObject) policy.get(\"operand2\")) : null;\r\n\r\n                newPolicy = new DiscountPolicyIf(buildDiscountPolicy(operand1,storeName), buildDiscountPolicy(operand2, storeName));\r\n            }\r\n            if(operator.equals(\"XOR\")){\r\n                JSONObject operand1 = (policy.containsKey(\"operand1\")) ? ((JSONObject) policy.get(\"operand1\")) : null;\r\n                JSONObject operand2 = (policy.containsKey(\"operand2\")) ? ((JSONObject) policy.get(\"operand2\")) : null;\r\n\r\n                newPolicy = new DiscountPolicyXor(buildDiscountPolicy(operand1,storeName), buildDiscountPolicy(operand2, storeName));\r\n            }\r\n            if(operator.equals(\"AND\")){\r\n                JSONObject operand1 = (policy.containsKey(\"operand1\")) ? ((JSONObject) policy.get(\"operand1\")) : null;\r\n                JSONObject operand2 = (policy.containsKey(\"operand2\")) ? ((JSONObject) policy.get(\"operand2\")) : null;\r\n\r\n                newPolicy = new DiscountPolicyAnd(buildDiscountPolicy(operand1,storeName), buildDiscountPolicy(operand2, storeName));\r\n            }\r\n        }\r\n\r\n        else if(type.equals(\"simple\")){\r\n            int discountId = (policy.containsKey(\"discountId\")) ? Integer.parseInt( policy.get(\"discountId\").toString()) : -1;\r\n            if(discountId == -1)\r\n                throw new IllegalArgumentException(\"invalid discountId\");\r\n            Store store = getStoreByName(storeName);\r\n            DiscountBInterface discount= store.getDiscountById(discountId);\r\n            newPolicy = discount;\r\n        }\r\n        return newPolicy;\r\n\r\n    }\r\n\r\n    private PolicyOperator parseOperator(String operator) {\r\n        if (operator.equals(\"OR\")) {\r\n            return PolicyOperator.OR;\r\n        }\r\n        if (operator.equals(\"AND\")) {\r\n            return PolicyOperator.AND;\r\n        }\r\n        if (operator.equals(\"XOR\")) {\r\n            return PolicyOperator.XOR;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public String addDiscountPolicy(String jsonString) {\r\n        try {\r\n            JSONParser parser = new JSONParser();\r\n            JSONObject requestJson = (JSONObject) parser.parse(jsonString);\r\n            String storeName = (requestJson.containsKey(\"store\")) ? ((String) requestJson.get(\"store\")) : null;\r\n            String[] args = {storeName};\r\n            Store store = getStoreByName(storeName);\r\n            if(emptyString(args) || getStoreByName(storeName) == null){\r\n                throw new IllegalArgumentException(\"store doesnt exist\");\r\n            }\r\n            DiscountBInterface discount = buildDiscountPolicy(requestJson, storeName);\r\n            if(discount == null){\r\n                throw new IllegalArgumentException(\"cant add the discount policy\");\r\n            }\r\n            else{\r\n                store.addDiscountPolicy(discount);\r\n            }\r\n            return \"the discount policy added successfully\";\r\n\r\n        }\r\n        catch (Exception e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public PurchasePolicy buildPurchasePolicy(JSONObject policy, Store store) {\r\n        PurchasePolicy newPolicy = null;\r\n        String type = (policy.containsKey(\"type\")) ? ((String) policy.get(\"type\")) : null;\r\n        if(type.equals(\"compose\")) {\r\n            String operatorStr = (policy.containsKey(\"operator\")) ? ((String) policy.get(\"operator\")) : null;\r\n            PolicyOperator operator = parseOperator(operatorStr);\r\n            if (operator != null) {\r\n                JSONObject operand1 = (policy.containsKey(\"operand1\")) ? ((JSONObject) policy.get(\"operand1\")) : null;\r\n                JSONObject operand2 = (policy.containsKey(\"operand2\")) ? ((JSONObject) policy.get(\"operand2\")) : null;\r\n                newPolicy = new PurchasePolicyComp(buildPurchasePolicy(operand1, store), buildPurchasePolicy(operand2, store), operator);\r\n            } else\r\n                throw new IllegalArgumentException(\"store doesnt exist\");\r\n        }\r\n\r\n\r\n        else if(type.equals(\"simple\")){\r\n\r\n                int purchaseId = (policy.containsKey(\"policyId\")) ? Integer.parseInt( policy.get(\"policyId\").toString()) : -1;\r\n                if(purchaseId == -1)\r\n                    throw new IllegalArgumentException(\"invalid purchaseId\");\r\n                PurchasePolicy pp= store.getPurchasePolicyById(purchaseId);\r\n                newPolicy = pp;\r\n            }\r\n\r\n        return newPolicy;\r\n\r\n    }\r\n\r\n    public String addPurchasePolicy(String jsonString) {\r\n        try {\r\n            JSONParser parser = new JSONParser();\r\n            JSONObject requestJson = (JSONObject) parser.parse(jsonString);\r\n            String storeName = (requestJson.containsKey(\"store\")) ? ((String) requestJson.get(\"store\")) : null;\r\n            String[] args = {storeName};\r\n            Store store = getStoreByName(storeName);\r\n            if(emptyString(args) || getStoreByName(storeName) == null){\r\n                throw new IllegalArgumentException(\"store doesnt exist\");\r\n            }\r\n            PurchasePolicy  purchasePolicy = buildPurchasePolicy(requestJson, store);\r\n            if(purchasePolicy == null){\r\n                throw new IllegalArgumentException(\"cant add the purchase policy\");\r\n            }\r\n            else{\r\n                store.addPurchasePolicy(purchasePolicy);\r\n            }\r\n            return \"the discount policy added successfully\";\r\n\r\n        }\r\n        catch (Exception e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public String checkAmountInInventory(String productName, String storeName) {\r\n        Store s = getStoreByName(storeName);\r\n        if(s != null) {\r\n            Product p = s.getProductByName(productName);\r\n            if(p!= null) {\r\n                Integer amount = s.getInventory().get(p);\r\n                if(amount != null) {\r\n                    return String.valueOf(amount);\r\n                }\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public String responseToAppointment(UUID session_id, String storeName, String userToResponse, boolean isApproved){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        User waiting = users.get(userToResponse);\r\n        Store store = getStoreByName(storeName);\r\n        if(isApproved){\r\n            store.approveAppointment(waiting, se.getLoggedin_user());\r\n        }\r\n        else{\r\n            store.declinedAppointment(waiting, se.getLoggedin_user());\r\n        }\r\n        return \"your response was updated successfully\";\r\n    }\r\n\r\n    public String getCartTotalPrice(UUID session_id){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        return String.valueOf(se.getLoggedin_user().getShoppingCart().getTotalCartPrice());\r\n    }\r\n\r\n    public void removePolicies(String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        store.removeDiscountPolicies();\r\n    }\r\n\r\n\r\n    public String removeStoreOwner(String userName, String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        User userToRemove = users.get(userName);\r\n        store.removeOwner(userToRemove);\r\n        return \"owner been removed successfully\";\r\n    }\r\n\r\n    public boolean isOwnerAppointer(UUID session_id, String storeName, String userName){\r\n        Store store = getStoreByName(storeName);\r\n        User user = users.get(userName);\r\n        if(active_sessions.get(session_id).equals(store.getOwnerAppointer(user))){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public String waitingAppointments(UUID session_id, String storeName){\r\n        Session se = active_sessions.get(session_id);\r\n        if(se == null)\r\n            throw new IllegalArgumentException(\"Invalid Session ID\");\r\n        Store store = getStoreByName(storeName);\r\n        String userNames = store.appointmentWaitingForUser(se.getLoggedin_user());\r\n        return userNames;\r\n    }\r\n\r\n    public void removePurchasePolicies(String storeName){\r\n        Store store = getStoreByName(storeName);\r\n        store.removePurchasePolicies();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- workshopCode/src/DomainLayer/TradingSystem/SystemFacade.java	(revision c2a6d85757b741e835ea2be58ba9aeeb67765693)
+++ workshopCode/src/DomainLayer/TradingSystem/SystemFacade.java	(date 1592783415192)
@@ -638,12 +638,9 @@
         User appointed_user = users.get(username);
 
         // update store and user
-        StoreOwning owning = new StoreOwning(se.getLoggedin_user(), storeName, username);
-        store.addStoreOwner(appointed_user, se.getLoggedin_user());
-        appointed_user.addOwnedStore(store, owning);
-
-
-        return "Username has been added as one of the store owners successfully";
+        //StoreOwning owning = new StoreOwning(se.getLoggedin_user(), storeName, username);
+        return store.addStoreOwner(appointed_user, se.getLoggedin_user());
+        //appointed_user.addOwnedStore(store, owning);
 
     }
 
@@ -1043,12 +1040,12 @@
         User waiting = users.get(userToResponse);
         Store store = getStoreByName(storeName);
         if(isApproved){
-            store.approveAppointment(waiting, se.getLoggedin_user());
+            return store.approveAppointment(waiting, se.getLoggedin_user());
         }
         else{
-            store.declinedAppointment(waiting, se.getLoggedin_user());
+            return store.declinedAppointment(waiting, se.getLoggedin_user());
         }
-        return "your response was updated successfully";
+
     }
 
     public String getCartTotalPrice(UUID session_id){
@@ -1067,14 +1064,15 @@
     public String removeStoreOwner(String userName, String storeName){
         Store store = getStoreByName(storeName);
         User userToRemove = users.get(userName);
-        store.removeOwner(userToRemove);
-        return "owner been removed successfully";
+        String result = store.removeOwner(userToRemove);
+        return "owner been removed successfully, " +result;
     }
 
     public boolean isOwnerAppointer(UUID session_id, String storeName, String userName){
         Store store = getStoreByName(storeName);
         User user = users.get(userName);
-        if(active_sessions.get(session_id).equals(store.getOwnerAppointer(user))){
+        User appointer = store.getAppointer(user);
+        if((appointer != null) && active_sessions.get(session_id).equals(appointer)){
             return true;
         }
         return false;
Index: workshopCode/tests/AcceptanceTests/UC4_3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package AcceptanceTests;\r\n\r\nimport DomainLayer.TradingSystem.SystemFacade;\r\nimport ServiceLayer.SessionHandler;\r\nimport ServiceLayer.StoreHandler;\r\nimport ServiceLayer.UsersHandler;\r\nimport org.junit.*;\r\n\r\nimport java.util.UUID;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assert.fail;\r\n\r\npublic class UC4_3 {\r\n\r\n    private static StoreHandler storeHandler;\r\n    private static UUID session_id;\r\n\r\n    @BeforeClass\r\n    public static void init() throws Exception{\r\n        session_id = (new SessionHandler()).openNewSession();\r\n        storeHandler = new StoreHandler();\r\n\r\n        // store owner (appointer)\r\n        (new UsersHandler()).register(\"nufi\", \"1234\");\r\n\r\n        // subscribed user (appointee)\r\n        (new UsersHandler()).register(\"tooti\", \"1234\");\r\n\r\n        (new UsersHandler()).login(session_id, \"nufi\", \"1234\", false);\r\n\r\n        (new StoreHandler()).openNewStore(session_id, \"KKW\", \"best Kim Kardashian beauty products\");\r\n\r\n    }\r\n\r\n    @AfterClass\r\n    public static void clean() {\r\n        (new UsersHandler()).resetUsers();\r\n        (new StoreHandler()).resetStores();\r\n        (new SessionHandler()).closeSession(session_id);\r\n    }\r\n\r\n    @After\r\n    public void tearDown() throws Exception {\r\n        storeHandler.resetStores();\r\n        (new StoreHandler()).openNewStore(session_id, \"KKW\", \"best Kim Kardashian beauty products\");\r\n    }\r\n\r\n    @Test\r\n    public void valid() {\r\n        String result = storeHandler.addStoreOwner(session_id, \"tooti\", \"KKW\");\r\n        assertEquals(\"{\\\"SUCCESS\\\":\\\"Username has been added as one of the store owners successfully\\\"}\", result);\r\n    }\r\n\r\n    @Test\r\n    public void emptyInput(){\r\n        try{\r\n            String result = storeHandler.addStoreOwner(session_id, \"\", \"KKW\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"Must enter username and store name\", e.getMessage());\r\n        }\r\n        try{\r\n            storeHandler.addStoreOwner(session_id, \"tooti\", \"\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"Must enter username and store name\", e.getMessage());\r\n        }\r\n        try{\r\n            storeHandler.addStoreOwner(session_id, null, \"KKW\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"Must enter username and store name\", e.getMessage());\r\n        }\r\n        try{\r\n            storeHandler.addStoreOwner(session_id, \"tooti\", null);\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"Must enter username and store name\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void storeDoesNotExist(){\r\n        try{\r\n            String result = storeHandler.addStoreOwner(session_id, \"tooti\", \"poosh\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"This store doesn't exist\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void userDoesNotExist(){\r\n        try{\r\n            String result = storeHandler.addStoreOwner(session_id, \"tooton\", \"KKW\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"This username doesn't exist\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void appointerIsNotOwner() {\r\n        SystemFacade.getInstance().logout(session_id);\r\n        SystemFacade.getInstance().register(\"toya\");\r\n        SystemFacade.getInstance().login(session_id, \"toya\", false);\r\n        try{\r\n            String result = storeHandler.addStoreOwner(session_id, \"tooti\", \"KKW\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"You must be this store owner for this action\", e.getMessage());\r\n        }\r\n        SystemFacade.getInstance().logout(session_id);\r\n        SystemFacade.getInstance().login(session_id, \"nufi\", false);\r\n    }\r\n\r\n    @Test\r\n    public void userAlreadyOwner() {\r\n        try{\r\n            String result = storeHandler.addStoreOwner(session_id, \"nufi\", \"KKW\");\r\n            fail();\r\n        }catch(Exception e) {\r\n            assertEquals(\"This username is already one of the store's owners\", e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- workshopCode/tests/AcceptanceTests/UC4_3.java	(revision c2a6d85757b741e835ea2be58ba9aeeb67765693)
+++ workshopCode/tests/AcceptanceTests/UC4_3.java	(date 1592783414982)
@@ -24,8 +24,10 @@
         // store owner (appointer)
         (new UsersHandler()).register("nufi", "1234");
 
-        // subscribed user (appointee)
+        // subscribed user (appointee1)
         (new UsersHandler()).register("tooti", "1234");
+        // subscribed user (appointee2)
+        (new UsersHandler()).register("lior", "1234");
 
         (new UsersHandler()).login(session_id, "nufi", "1234", false);
 
@@ -48,8 +50,23 @@
 
     @Test
     public void valid() {
+        UUID sessionId2 = (new SessionHandler()).openNewSession();
+        (new UsersHandler()).login(sessionId2,"tooti","1234", false);
         String result = storeHandler.addStoreOwner(session_id, "tooti", "KKW");
-        assertEquals("{\"SUCCESS\":\"Username has been added as one of the store owners successfully\"}", result);
+        //add the second owner - dont need approvement
+        assertEquals("{\"SUCCESS\":\"the appointment of the new owner is done successfully\"}", result);
+        //declined
+        String result2 = storeHandler.addStoreOwner(session_id,"lior","KKW");
+        assertEquals("{\"SUCCESS\":\"the appointment of the new owner is waiting for the owners response\"}", result2);
+        String result3 = storeHandler.responseToAppointmentRequest(sessionId2,"KKW","lior",false);
+        assertEquals("{\"SUCCESS\":\"your response was updated successfully - the new appointment declined\"}", result3);
+        //approved
+        String result4 = storeHandler.addStoreOwner(session_id,"lior","KKW");
+        assertEquals("{\"SUCCESS\":\"the appointment of the new owner is waiting for the owners response\"}", result4);
+        String result5 = storeHandler.responseToAppointmentRequest(sessionId2,"KKW","lior",true);
+        assertEquals("{\"SUCCESS\":\"your response was updated successfully - the new appointment approved\"}", result5);
+        (new UsersHandler()).logout(sessionId2);
+
     }
 
     @Test
